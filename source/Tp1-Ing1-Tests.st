TestCase subclass: #TestsSistemaDeConstruccionDePozos	instanceVariableNames: 'sistemaDeConstruccion yacimiento simulador'	classVariableNames: ''	poolDictionaries: ''	category: 'Tp1-Ing1-Tests'!!TestsSistemaDeConstruccionDePozos methodsFor: 'private-asserting' stamp: 'JuanVanecek 4/9/2017 16:58'!assertTheOnlyOneIn: aCollection is: anElement 		self assert: aCollection size equals: 1. 	self assert: aCollection first equals: anElement! !!TestsSistemaDeConstruccionDePozos methodsFor: 'private-asserting' stamp: 'JuanVanecek 4/9/2017 12:21'!assertIsEmpty: aCollection 	self assert: aCollection isEmpty! !!TestsSistemaDeConstruccionDePozos methodsFor: 'private-accessing' stamp: 'JuanVanecek 4/16/2017 16:47'!unaPlantaProcesadora			^ PlantaProcesadora 		construidaEnDias: 20 		conUnCostoTotalDe: 10000 		procesandoUnVolumenDiarioDe: 50.	! !!TestsSistemaDeConstruccionDePozos methodsFor: 'private-accessing' stamp: 'JuanVanecek 5/7/2017 19:30'!pozoConstruidoEnDias: unaCantidadDeDias empezando: unaFecha		| plantaProcesadora parcela excavadora | 	plantaProcesadora := self unaPlantaProcesadora.	parcela := self parcelaLibreConUnaResistenciaDe: 0 yDistanciaAlReservorio: unaCantidadDeDias.	excavadora := ExcavadoraRig perforandoEnMetrosEnUnDia: 1 consumiendoEnLitros: 5.		^ sistemaDeConstruccion construirUnPozoEn: parcela conectadaA: plantaProcesadora con: excavadora arrancandoEl: self diaDeHoy.! !!TestsSistemaDeConstruccionDePozos methodsFor: 'private-accessing' stamp: 'JuanVanecek 4/9/2017 17:27'!parcelaLibreConUnaResistenciaDe: unPorcentaje yDistanciaAlReservorio: unaDistanciaEnMetros	^ yacimiento 		parcelaLibreDeTipo: (MantoGeologico conocidoComo: 'manto' ofreciendoUnaResistenciaDel: unPorcentaje)		presionInicial: 500 		yDistanciaAlReservorio: unaDistanciaEnMetros! !!TestsSistemaDeConstruccionDePozos methodsFor: 'private-accessing' stamp: 'JuanVanecek 4/9/2017 12:07'!diaDeHoy	^ Date today! !!TestsSistemaDeConstruccionDePozos methodsFor: 'testing' stamp: 'JuanVanecek 5/7/2017 18:40'!testUnRIGPuedeSerUtilizadaDuranteUnaSolaExcavacion	| plantaProcesadora parcela1 parcela2 excavadora | 	plantaProcesadora := self unaPlantaProcesadora.	parcela1 := self parcelaLibreConUnaResistenciaDe: 0 yDistanciaAlReservorio: 11.	parcela2 := self parcelaLibreConUnaResistenciaDe: 0 yDistanciaAlReservorio: 9.	excavadora := ExcavadoraRig perforandoEnMetrosEnUnDia: 2 consumiendoEnLitros: 5.	sistemaDeConstruccion construirUnPozoEn: parcela1 conectadaA: plantaProcesadora con: excavadora arrancandoEl: self diaDeHoy.		self 		should: [ 			sistemaDeConstruccion construirUnPozoEn: parcela2 conectadaA: plantaProcesadora con: excavadora arrancandoEl: self diaDeHoy ]		raise: ConstruccionInvalida ! !!TestsSistemaDeConstruccionDePozos methodsFor: 'testing' stamp: 'JuanVanecek 5/7/2017 07:12'!testUnPozoEstaDisponibleDespuesDeConstruido	| plantaProcesadora parcela excavadora pozo | 		plantaProcesadora := self unaPlantaProcesadora.	parcela := self parcelaLibreConUnaResistenciaDe: 0 yDistanciaAlReservorio: 11.	excavadora := ExcavadoraRig perforandoEnMetrosEnUnDia: 2 consumiendoEnLitros: 5.	pozo := sistemaDeConstruccion construirUnPozoEn: parcela conectadaA: plantaProcesadora con: excavadora arrancandoEl: self diaDeHoy.			self 		assertIsEmpty: (sistemaDeConstruccion pozosConstruidosAl: self diaDeHoy);		assertIsEmpty: (sistemaDeConstruccion pozosConstruidosAl: self diaDeHoy next);		assertIsEmpty: (sistemaDeConstruccion pozosConstruidosAl: (self diaDeHoy addDays: 6));		assertTheOnlyOneIn: (sistemaDeConstruccion pozosConstruidosAl: (self diaDeHoy addDays: 7)) is: pozo.			self 		assert: (sistemaDeConstruccion estaDisponible: excavadora el: self diaDeHoy previous);		deny: (sistemaDeConstruccion estaDisponible: excavadora el: self diaDeHoy);		deny: (sistemaDeConstruccion estaDisponible: excavadora el: (self diaDeHoy addDays: 6));		assert: (sistemaDeConstruccion estaDisponible: excavadora el: (self diaDeHoy addDays: 7))! !!TestsSistemaDeConstruccionDePozos methodsFor: 'testing' stamp: 'JuanVanecek 5/7/2017 07:12'!testUnTanqueDeGasEstaDisponibleDespuesDeConstruido	| tanque planta | 		planta := self unaPlantaProcesadora.	tanque := TanqueDeGas		construidaEnDias: 10		conUnCostoTotalDe: 100000		conectadoA: planta 		conCapacidadDe: 3000.	sistemaDeConstruccion construirTanqueDeGas: tanque empezandoEl: self diaDeHoy.		self 		assertIsEmpty: (sistemaDeConstruccion tanquesDeGasConstruidosAl: self diaDeHoy);		assertIsEmpty: (sistemaDeConstruccion tanquesDeGasConstruidosAl: self diaDeHoy next);		assertIsEmpty: (sistemaDeConstruccion tanquesDeGasConstruidosAl: (self diaDeHoy addDays: 9));		assertTheOnlyOneIn: (sistemaDeConstruccion tanquesDeGasConstruidosAl: (self diaDeHoy addDays: 10)) is: tanque;		assertTheOnlyOneIn: (sistemaDeConstruccion tanquesDeGasConstruidosAl: (self diaDeHoy addDays: 11)) is: tanque.! !!TestsSistemaDeConstruccionDePozos methodsFor: 'testing' stamp: 'JuanVanecek 5/7/2017 07:12'!testUnTanqueDeAguaEstaDisponibleDespuesDeConstruido	| tanque planta | 		planta := self unaPlantaProcesadora.	tanque := TanqueDeAgua 		construidaEnDias: 10		conUnCostoTotalDe: 100000		conectadoA: planta 		conCapacidadDe: 3000.	sistemaDeConstruccion construirTanqueDeAgua: tanque empezandoEl: self diaDeHoy.		self 		assertIsEmpty: (sistemaDeConstruccion tanquesDeAguaConstruidosAl: self diaDeHoy);		assertIsEmpty: (sistemaDeConstruccion tanquesDeAguaConstruidosAl: self diaDeHoy next);		assertIsEmpty: (sistemaDeConstruccion tanquesDeAguaConstruidosAl: (self diaDeHoy addDays: 9));		assertTheOnlyOneIn: (sistemaDeConstruccion tanquesDeAguaConstruidosAl: (self diaDeHoy addDays: 10)) is: tanque;		assertTheOnlyOneIn: (sistemaDeConstruccion tanquesDeAguaConstruidosAl: (self diaDeHoy addDays: 11)) is: tanque.! !!TestsSistemaDeConstruccionDePozos methodsFor: 'testing' stamp: 'JuanVanecek 5/7/2017 07:12'!testResistenciaDelTerrenoAfectaTrabajoDePerforacion	| plantaProcesadora parcela excavadora pozo | 		plantaProcesadora := self unaPlantaProcesadora.	parcela := self parcelaLibreConUnaResistenciaDe: 0.5 yDistanciaAlReservorio: 11.	excavadora := ExcavadoraRig perforandoEnMetrosEnUnDia: 2 consumiendoEnLitros: 5.	pozo := sistemaDeConstruccion construirUnPozoEn: parcela conectadaA: plantaProcesadora con: excavadora arrancandoEl: self diaDeHoy.	self 		assertIsEmpty: (sistemaDeConstruccion pozosConstruidosAl: self diaDeHoy);		assertIsEmpty: (sistemaDeConstruccion pozosConstruidosAl: self diaDeHoy next);		assertIsEmpty: (sistemaDeConstruccion pozosConstruidosAl: (self diaDeHoy addDays: 9));		assertTheOnlyOneIn: (sistemaDeConstruccion pozosConstruidosAl: (self diaDeHoy addDays: 10)) is: pozo.			self 		assert: (sistemaDeConstruccion estaDisponible: excavadora el: self diaDeHoy previous);		deny: (sistemaDeConstruccion estaDisponible: excavadora el: self diaDeHoy);		deny: (sistemaDeConstruccion estaDisponible: excavadora el: (self diaDeHoy addDays: 9));		assert: (sistemaDeConstruccion estaDisponible: excavadora el: (self diaDeHoy addDays: 10))! !!TestsSistemaDeConstruccionDePozos methodsFor: 'testing' stamp: 'JuanVanecek 5/7/2017 07:12'!testUnaPlantaProcesadoraEstaDisponibleDespuesDeConstruida	| plantaProcesadora | 		plantaProcesadora := self unaPlantaProcesadora.	sistemaDeConstruccion construirUnaPlantaProcesadora: plantaProcesadora arrancandoEl: self diaDeHoy.			self 		assertIsEmpty: (sistemaDeConstruccion plantasProcesadorasConstruidasAl: self diaDeHoy);		assertIsEmpty: (sistemaDeConstruccion plantasProcesadorasConstruidasAl: (self diaDeHoy addDays: plantaProcesadora tiempoDeConstruccion));		assertTheOnlyOneIn: (sistemaDeConstruccion plantasProcesadorasConstruidasAl: (self diaDeHoy addDays: plantaProcesadora tiempoDeConstruccion + 1))			is: plantaProcesadora.! !!TestsSistemaDeConstruccionDePozos methodsFor: 'setup' stamp: 'JuanVanecek 5/7/2017 13:37'!setUp	super setUp. 		sistemaDeConstruccion := SistemaDeConstruccionDePozos comoParteDe: SistemaDeSimulacion new.		self setUpYacimiento.! !!TestsSistemaDeConstruccionDePozos methodsFor: 'setup' stamp: 'JuanVanecek 5/1/2017 16:01'!setUpYacimiento		yacimiento := Yacimiento 		deTamanioEnHectareas: 5		volumenDeProducto: 10000000		compuestoPorAguaEn: 10		porGasEn: 20		yEnPetroleo: 70.			! !TestCase subclass: #TestsSistemaDeEjecucionDeCriterios	instanceVariableNames: 'yacimiento sistemaDeEjecucionDeCriterios sistemaDeConstruccion sistemaDeGestionDeExcavadoras'	classVariableNames: ''	poolDictionaries: ''	category: 'Tp1-Ing1-Tests'!!TestsSistemaDeEjecucionDeCriterios methodsFor: 'private-accessing' stamp: 'JuanVanecek 5/7/2017 14:23'!habilitarExcavadoraQueCavaPorMetrosDia: unaMedidaEnMetros 	sistemaDeGestionDeExcavadoras 		registrar: (				ExcavadoraRig 				perforandoEnMetrosEnUnDia: unaMedidaEnMetros 				consumiendoEnLitros: 1) 		conUnCostoPorDia: 100 		porUnMinimoDeDias: 1! !!TestsSistemaDeEjecucionDeCriterios methodsFor: 'accessing' stamp: 'JuanVanecek 5/7/2017 14:39'!diaDeHoy	^ Date today! !!TestsSistemaDeEjecucionDeCriterios methodsFor: 'private' stamp: 'JuanVanecek 5/7/2017 14:28'!crearParcelaEn: unYacimiento deProfundidad: unaDistanciaEnMetros	unYacimiento 		parcelaLibreDeTipo: (MantoGeologico conocidoComo: 'terreno' ofreciendoUnaResistenciaDel: 0)		presionInicial: 1000 		yDistanciaAlReservorio: unaDistanciaEnMetros	! !!TestsSistemaDeEjecucionDeCriterios methodsFor: 'testing' stamp: 'JuanVanecek 5/7/2017 19:31'!testConstruir3PozosCon3ExcavadoraEnLasParcelasMenosProfundas	| criterio | 		self 		habilitarExcavadoraQueCavaPorMetrosDia: 3;		habilitarExcavadoraQueCavaPorMetrosDia: 5;		habilitarExcavadoraQueCavaPorMetrosDia: 4;		crearParcelaEn: yacimiento deProfundidad: 40;		crearParcelaEn: yacimiento deProfundidad: 30;		crearParcelaEn: yacimiento deProfundidad: 20;		crearParcelaEn: yacimiento deProfundidad: 10.			criterio := CriterioDeConstruccion construir: 3 pozosEnLasParcelasMenosProfundasDe: yacimiento.		sistemaDeEjecucionDeCriterios ejecutar: criterio. 	" construcciones en el dia 10/5, 20/4, 30/3"	self 		assert: (sistemaDeConstruccion pozosConstruidosAl: self diaDeHoy) size equals: 0;		assert: (sistemaDeConstruccion pozosConstruidosAl: (self diaDeHoy addDays: 2)) size equals: 0;		assert: (sistemaDeConstruccion pozosConstruidosAl: (self diaDeHoy addDays: 3)) size equals: 1;		assert: (sistemaDeConstruccion pozosConstruidosAl: (self diaDeHoy addDays: 5)) size equals: 1;		assert: (sistemaDeConstruccion pozosConstruidosAl: (self diaDeHoy addDays: 6)) size equals: 2;		assert: (sistemaDeConstruccion pozosConstruidosAl: (self diaDeHoy addDays: 10)) size equals: 2;		assert: (sistemaDeConstruccion pozosConstruidosAl: (self diaDeHoy addDays: 11)) size equals: 3! !!TestsSistemaDeEjecucionDeCriterios methodsFor: 'setup' stamp: 'JuanVanecek 5/7/2017 15:01'!setUp		| simulador | 		super setUp. 		simulador := SistemaDeSimulacion new.	sistemaDeEjecucionDeCriterios := SistemaDeEjecucionDeCriterios comoParteDe: simulador.	sistemaDeGestionDeExcavadoras := SistemaDeGestionDeExcavadoras comoParteDe: simulador.	sistemaDeConstruccion := SistemaDeConstruccionDePozos comoParteDe: simulador.		self 		setUpYacimiento;		setUpPlantaProcesadora.! !!TestsSistemaDeEjecucionDeCriterios methodsFor: 'setup' stamp: 'JuanVanecek 5/7/2017 13:58'!setUpYacimiento		yacimiento := Yacimiento 		deTamanioEnHectareas: 5		volumenDeProducto: 10000000		compuestoPorAguaEn: 10		porGasEn: 20		yEnPetroleo: 70.! !!TestsSistemaDeEjecucionDeCriterios methodsFor: 'setup' stamp: 'JuanVanecek 5/7/2017 15:06'!setUpPlantaProcesadora	sistemaDeConstruccion 		construirUnaPlantaProcesadora: (			PlantaProcesadora 				construidaEnDias: 0 				conUnCostoTotalDe: 10000 				procesandoUnVolumenDiarioDe: 50) 		arrancandoEl: (self diaDeHoy subtractDays: 1).! !TestCase subclass: #TestsSistemaDeExtraccionDePozos	instanceVariableNames: 'sistemaDeExtraccion yacimiento simulador sistemaDeConstruccion'	classVariableNames: ''	poolDictionaries: ''	category: 'Tp1-Ing1-Tests'!!TestsSistemaDeExtraccionDePozos methodsFor: 'testing' stamp: 'JuanVanecek 5/7/2017 19:30'!testPresionDeUnPozoAfectadaPorUnaExtraccion	| pozo | 		pozo := self pozoConstruidoEnDias: 6 empezando: self diaDeHoy.		sistemaDeExtraccion extraerProductoDe: pozo en: (self diaDeHoy addDays: 7). 		self 		assert: (sistemaDeExtraccion presionDe: pozo a: (self diaDeHoy addDays: 6)) equals: pozo presionInicial;		assert: (sistemaDeExtraccion presionDe: pozo a: (self diaDeHoy addDays: 7)) equals: pozo presionInicial;		assert: (sistemaDeExtraccion presionDe: pozo a: (self diaDeHoy addDays: 8)) equals: (pozo presionInicial / (Float e ** 0.1))! !!TestsSistemaDeExtraccionDePozos methodsFor: 'testing' stamp: 'JuanVanecek 5/7/2017 19:30'!testVolumenExtraidoAlPrimerDiaConDosPozos	| pozo1 pozo2 volumenExtraidoEsperado | 	pozo1 := self pozoConstruidoEnDias: 6 empezando: self diaDeHoy.	pozo2 := self pozoConstruidoEnDias: 6 empezando: self diaDeHoy.		sistemaDeExtraccion extraerProductoDe: pozo1 en: (self diaDeHoy addDays: 7). 	sistemaDeExtraccion extraerProductoDe: pozo2 en: (self diaDeHoy addDays: 7).		volumenExtraidoEsperado := 		(sistemaDeExtraccion potencialDiarioDe: pozo1 al: (self diaDeHoy addDays: 7)) + 		(sistemaDeExtraccion potencialDiarioDe: pozo2 al: (self diaDeHoy addDays: 7)).			self 		assert: (sistemaDeExtraccion volumenExtraidoDe: yacimiento a: (self diaDeHoy addDays: 6)) equals: 0;		assert: (sistemaDeExtraccion volumenExtraidoDe: yacimiento a: (self diaDeHoy addDays: 7)) equals: volumenExtraidoEsperado! !!TestsSistemaDeExtraccionDePozos methodsFor: 'testing' stamp: 'JuanVanecek 5/7/2017 19:30'!testNoSePuedeExtraerDeUnPozoSinTerminar	| pozo | 		pozo := self pozoConstruidoEnDias: 6 empezando: self diaDeHoy.			self 		should: [ sistemaDeExtraccion extraerProductoDe: pozo en: (self diaDeHoy addDays: 6) ] 		raise: ConstruccionIncompleta 		description: ('No se puede extraer producto de {1} porque al {2} no esta terminado aun' format: { pozo . self diaDeHoy })! !!TestsSistemaDeExtraccionDePozos methodsFor: 'testing' stamp: 'JuanVanecek 5/7/2017 19:30'!testPotencialDeProductoSinExtraccionAlPrimerDia	| pozo potencialDia1 presionDia1 | 	pozo := self pozoConstruidoEnDias: 6 empezando: self diaDeHoy .	potencialDia1 := sistemaDeExtraccion potencialDiarioDe: pozo al: (self diaDeHoy addDays: 7).		presionDia1 := sistemaDeExtraccion presionDe: pozo a: (self diaDeHoy addDays: 7) . 	self assert: potencialDia1 equals: (self defaultAlpha1 * presionDia1 + (self defaultAlpha2 * (presionDia1 ** 2))). ! !!TestsSistemaDeExtraccionDePozos methodsFor: 'setup' stamp: 'JuanVanecek 5/7/2017 06:46'!setUpSistemaDeConstruccion	sistemaDeConstruccion := SistemaDeConstruccionDePozos comoParteDe: simulador.! !!TestsSistemaDeExtraccionDePozos methodsFor: 'setup' stamp: 'JuanVanecek 5/7/2017 07:25'!setUp	super setUp.	simulador := SistemaDeSimulacion new.	self		setUpSistemaDeConstruccion;		setUpSistemaDeExtraccion;		setUpYacimiento! !!TestsSistemaDeExtraccionDePozos methodsFor: 'setup' stamp: 'JuanVanecek 5/7/2017 06:08'!setUpYacimiento		yacimiento := Yacimiento 		deTamanioEnHectareas: 5		volumenDeProducto: 10000000		compuestoPorAguaEn: 10		porGasEn: 20		yEnPetroleo: 70.! !!TestsSistemaDeExtraccionDePozos methodsFor: 'setup' stamp: 'JuanVanecek 5/7/2017 07:21'!setUpSistemaDeExtraccion		sistemaDeExtraccion := SistemaDeExtraccionDePozos		comoParteDe: simulador		calcuandoPresionCon:			(CalculadoraDefaultDePresiones				usandoComoAlpha1: self defaultAlpha1				comoAlpha2: self defaultAlpha2)! !!TestsSistemaDeExtraccionDePozos methodsFor: 'private-accessing' stamp: 'JuanVanecek 5/7/2017 06:27'!unaPlantaProcesadora			^ PlantaProcesadora 		construidaEnDias: 20 		conUnCostoTotalDe: 10000 		procesandoUnVolumenDiarioDe: 50.	! !!TestsSistemaDeExtraccionDePozos methodsFor: 'private-accessing' stamp: 'JuanVanecek 5/7/2017 19:30'!pozoConstruidoEnDias: unaCantidadDeDias empezando: unaFecha		| plantaProcesadora parcela excavadora | 	plantaProcesadora := self unaPlantaProcesadora.	parcela := self parcelaLibreConUnaResistenciaDe: 0 yDistanciaAlReservorio: unaCantidadDeDias.	excavadora := ExcavadoraRig perforandoEnMetrosEnUnDia: 1 consumiendoEnLitros: 5.		^ sistemaDeConstruccion construirUnPozoEn: parcela conectadaA: plantaProcesadora con: excavadora arrancandoEl: self diaDeHoy.! !!TestsSistemaDeExtraccionDePozos methodsFor: 'private-accessing' stamp: 'JuanVanecek 5/7/2017 06:09'!defaultAlpha1	^ 0.5! !!TestsSistemaDeExtraccionDePozos methodsFor: 'private-accessing' stamp: 'JuanVanecek 5/7/2017 06:09'!defaultAlpha2	^ 0.01! !!TestsSistemaDeExtraccionDePozos methodsFor: 'private-accessing' stamp: 'JuanVanecek 5/7/2017 06:27'!diaDeHoy	^ Date today! !!TestsSistemaDeExtraccionDePozos methodsFor: 'private-accessing' stamp: 'JuanVanecek 5/7/2017 06:28'!parcelaLibreConUnaResistenciaDe: unPorcentaje yDistanciaAlReservorio: unaDistanciaEnMetros	^ yacimiento 		parcelaLibreDeTipo: (MantoGeologico conocidoComo: 'manto' ofreciendoUnaResistenciaDel: unPorcentaje)		presionInicial: 500 		yDistanciaAlReservorio: unaDistanciaEnMetros! !TestCase subclass: #TestsUnitarios	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Tp1-Ing1-Tests'!!TestsUnitarios methodsFor: 'Testing' stamp: 'JuanVanecek 5/1/2017 16:04'!testUnYacimientoTieneUnaCapacididadLimitadaDeProducto	self		should: [ 				Yacimiento 					deTamanioEnHectareas: 1					volumenDeProducto: 9999999					compuestoPorAguaEn: 0					porGasEn: 30					yEnPetroleo: 70 ] 			raise: AssertionFailure			description: 'La cantidad de producto tiene que estar entre 10000000 y 1000000000 m3';		should: [ 				Yacimiento 					deTamanioEnHectareas: 1					volumenDeProducto: 1000000001					compuestoPorAguaEn: 0					porGasEn: 30					yEnPetroleo: 70 ] 			raise: AssertionFailure			description: 'La cantidad de producto tiene que estar entre 10000000 y 1000000000 m3'! !!TestsUnitarios methodsFor: 'Testing' stamp: 'JuanVanecek 5/1/2017 16:01'!testNoPuedoTenerMasParcelasEnUnYacimientoQueSuTamanio	| yacimiento | 		yacimiento := Yacimiento 		deTamanioEnHectareas: 3		volumenDeProducto: 10000000		compuestoPorAguaEn: 10		porGasEn: 30		yEnPetroleo: 60.			(1 to: 4) do: [ :i | | crearYacimiento | 				crearYacimiento := [ 			yacimiento 				parcelaLibreDeTipo: self terrenoRocoso				presionInicial: 100				yDistanciaAlReservorio: 5 ].					i < 4				ifTrue: crearYacimiento 				ifFalse: [ self should: crearYacimiento raise: AssertionFailure description: 'No hay más parcelas disponibles para este yacimiento'	 ]		 ]! !!TestsUnitarios methodsFor: 'Testing' stamp: 'JuanVanecek 5/1/2017 16:01'!testLosCompuestosDeUnYacimientoTieneQueSerSu100porCiento	self		should: [ 				Yacimiento 					deTamanioEnHectareas: 1					volumenDeProducto: 10000000					compuestoPorAguaEn: 10					porGasEn: 30					yEnPetroleo: 70 ] 			raise: AssertionFailure			description: 'Los compuestos tienen que representar el 100% del reservorio';		should: [ 				Yacimiento 					deTamanioEnHectareas: 1					volumenDeProducto: 10000000					compuestoPorAguaEn: 10					porGasEn: 20					yEnPetroleo: 60 ] 			raise: AssertionFailure			description: 'Los compuestos tienen que representar el 100% del reservorio';		should: [ 				Yacimiento 					deTamanioEnHectareas: 1					volumenDeProducto: 10000000					compuestoPorAguaEn: 100					porGasEn: 10					yEnPetroleo: 60 ] 			raise: AssertionFailure			description: 'Los compuestos tienen que representar el 100% del reservorio'.		self 		shouldnt: [ 				Yacimiento 					deTamanioEnHectareas: 1					volumenDeProducto: 10000000					compuestoPorAguaEn: 10					porGasEn: 30					yEnPetroleo: 60 ] 			raise: AssertionFailure;		shouldnt: [ 				Yacimiento 					deTamanioEnHectareas: 1					volumenDeProducto: 10000000					compuestoPorAguaEn: 0					porGasEn: 0					yEnPetroleo: 100 ] 			raise: AssertionFailure! !!TestsUnitarios methodsFor: 'Testing' stamp: 'JuanVanecek 4/8/2017 13:19'!testRegistrarUnaExcavadoraEnElCatalogo	| excavadora catalogo | 		excavadora := ExcavadoraRig 		perforandoEnMetrosEnUnDia: 1		consumiendoEnLitros: 3. 			catalogo := (CatalogoDeExcavadorasRig new)		registrar: excavadora 			aUnCostoPorDia: 500 			porUnMinimoDeDias: 4;		yourself.			self assertTheOnlyOneIn: catalogo excavadorasDisponibles is: excavadora.		catalogo conLosRegistrosHacer: [:excavadoraDisponible :costoPorDia :alquilerMinimo | 		self 			assert: excavadoraDisponible equals: excavadora;			assert: costoPorDia equals: 500; 			assert: alquilerMinimo equals: 4		 ]! !!TestsUnitarios methodsFor: 'Testing' stamp: 'JuanVanecek 5/1/2017 11:13'!testConectarTanquesDeAlmacenamientoAUnaPlantaProcesadora 	| planta tanqueDeGas tanqueDeAgua | 		planta := PlantaProcesadora		construidaEnDias: 10		conUnCostoTotalDe: 4000		procesandoUnVolumenDiarioDe: 40.			tanqueDeGas := TanqueDeGas 		construidaEnDias: 1		conUnCostoTotalDe: 4		conectadoA: planta		conCapacidadDe: 400.	tanqueDeAgua := TanqueDeAgua 		construidaEnDias: 1		conUnCostoTotalDe: 4		conectadoA: planta		conCapacidadDe: 500.		self 		assert: planta tanquesDeAlmacenamiento 		hasTheSameElementsThat: (Array with: tanqueDeGas with: tanqueDeAgua)! !!TestsUnitarios methodsFor: 'private-asserting' stamp: 'JuanVanecek 4/8/2017 13:25'!assertTheOnlyOneIn: aCollection is: anElement 	self 		assert: aCollection size equals: 1;		assert: aCollection first equals: anElement! !!TestsUnitarios methodsFor: 'private-asserting' stamp: 'JuanVanecek 4/9/2017 11:13'!assert: aCollection hasTheSameElementsThat: anotherCollection 	self assert: aCollection size equals: anotherCollection size.		anotherCollection do: [:element | 		self assert: (aCollection includes: element)		 ]! !!TestsUnitarios methodsFor: 'private-accessing' stamp: 'JuanVanecek 4/9/2017 22:05'!terrenoRocoso		^MantoGeologico conocidoComo: 'Terreno Rocoso' ofreciendoUnaResistenciaDel: 0! !