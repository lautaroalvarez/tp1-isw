TestCase subclass: #TestTp1	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Tp1-Ing1-Tests'!!TestTp1 methodsFor: 'Testing' stamp: 'JuanVanecek 5/1/2017 16:04'!testUnYacimientoTieneUnaCapacididadLimitadaDeProducto	self		should: [ 				Yacimiento 					deTamanioEnHectareas: 1					volumenDeProducto: 9999999					compuestoPorAguaEn: 0					porGasEn: 30					yEnPetroleo: 70 ] 			raise: AssertionFailure			description: 'La cantidad de producto tiene que estar entre 10000000 y 1000000000 m3';		should: [ 				Yacimiento 					deTamanioEnHectareas: 1					volumenDeProducto: 1000000001					compuestoPorAguaEn: 0					porGasEn: 30					yEnPetroleo: 70 ] 			raise: AssertionFailure			description: 'La cantidad de producto tiene que estar entre 10000000 y 1000000000 m3'! !!TestTp1 methodsFor: 'Testing' stamp: 'JuanVanecek 5/1/2017 16:01'!testNoPuedoTenerMasParcelasEnUnYacimientoQueSuTamanio	| yacimiento | 		yacimiento := Yacimiento 		deTamanioEnHectareas: 3		volumenDeProducto: 10000000		compuestoPorAguaEn: 10		porGasEn: 30		yEnPetroleo: 60.			(1 to: 4) do: [ :i | | crearYacimiento | 				crearYacimiento := [ 			yacimiento 				parcelaLibreDeTipo: self terrenoRocoso				presionInicial: 100				yDistanciaAlReservorio: 5 ].					i < 4				ifTrue: crearYacimiento 				ifFalse: [ self should: crearYacimiento raise: AssertionFailure description: 'No hay más parcelas disponibles para este yacimiento'	 ]		 ]! !!TestTp1 methodsFor: 'Testing' stamp: 'JuanVanecek 5/1/2017 16:01'!testLosCompuestosDeUnYacimientoTieneQueSerSu100porCiento	self		should: [ 				Yacimiento 					deTamanioEnHectareas: 1					volumenDeProducto: 10000000					compuestoPorAguaEn: 10					porGasEn: 30					yEnPetroleo: 70 ] 			raise: AssertionFailure			description: 'Los compuestos tienen que representar el 100% del reservorio';		should: [ 				Yacimiento 					deTamanioEnHectareas: 1					volumenDeProducto: 10000000					compuestoPorAguaEn: 10					porGasEn: 20					yEnPetroleo: 60 ] 			raise: AssertionFailure			description: 'Los compuestos tienen que representar el 100% del reservorio';		should: [ 				Yacimiento 					deTamanioEnHectareas: 1					volumenDeProducto: 10000000					compuestoPorAguaEn: 100					porGasEn: 10					yEnPetroleo: 60 ] 			raise: AssertionFailure			description: 'Los compuestos tienen que representar el 100% del reservorio'.		self 		shouldnt: [ 				Yacimiento 					deTamanioEnHectareas: 1					volumenDeProducto: 10000000					compuestoPorAguaEn: 10					porGasEn: 30					yEnPetroleo: 60 ] 			raise: AssertionFailure;		shouldnt: [ 				Yacimiento 					deTamanioEnHectareas: 1					volumenDeProducto: 10000000					compuestoPorAguaEn: 0					porGasEn: 0					yEnPetroleo: 100 ] 			raise: AssertionFailure! !!TestTp1 methodsFor: 'Testing' stamp: 'JuanVanecek 4/8/2017 13:19'!testRegistrarUnaExcavadoraEnElCatalogo	| excavadora catalogo | 		excavadora := ExcavadoraRig 		perforandoEnMetrosEnUnDia: 1		consumiendoEnLitros: 3. 			catalogo := (CatalogoDeExcavadorasRig new)		registrar: excavadora 			aUnCostoPorDia: 500 			porUnMinimoDeDias: 4;		yourself.			self assertTheOnlyOneIn: catalogo excavadorasDisponibles is: excavadora.		catalogo conLosRegistrosHacer: [:excavadoraDisponible :costoPorDia :alquilerMinimo | 		self 			assert: excavadoraDisponible equals: excavadora;			assert: costoPorDia equals: 500; 			assert: alquilerMinimo equals: 4		 ]! !!TestTp1 methodsFor: 'Testing' stamp: 'JuanVanecek 5/1/2017 11:13'!testConectarTanquesDeAlmacenamientoAUnaPlantaProcesadora 	| planta tanqueDeGas tanqueDeAgua | 		planta := PlantaProcesadora		construidaEnDias: 10		conUnCostoTotalDe: 4000		procesandoUnVolumenDiarioDe: 40.			tanqueDeGas := TanqueDeGas 		construidaEnDias: 1		conUnCostoTotalDe: 4		conectadoA: planta		conCapacidadDe: 400.	tanqueDeAgua := TanqueDeAgua 		construidaEnDias: 1		conUnCostoTotalDe: 4		conectadoA: planta		conCapacidadDe: 500.		self 		assert: planta tanquesDeAlmacenamiento 		hasTheSameElementsThat: (Array with: tanqueDeGas with: tanqueDeAgua)! !!TestTp1 methodsFor: 'Asserting' stamp: 'JuanVanecek 4/8/2017 13:25'!assertTheOnlyOneIn: aCollection is: anElement 	self 		assert: aCollection size equals: 1;		assert: aCollection first equals: anElement! !!TestTp1 methodsFor: 'Asserting' stamp: 'JuanVanecek 4/9/2017 11:13'!assert: aCollection hasTheSameElementsThat: anotherCollection 	self assert: aCollection size equals: anotherCollection size.		anotherCollection do: [:element | 		self assert: (aCollection includes: element)		 ]! !!TestTp1 methodsFor: 'Accessing' stamp: 'JuanVanecek 4/9/2017 22:05'!terrenoRocoso		^MantoGeologico conocidoComo: 'Terreno Rocoso' ofreciendoUnaResistenciaDel: 0! !TestCase subclass: #TestsSistemaDeGestionDePozos	instanceVariableNames: 'sistemaDeGestion yacimiento'	classVariableNames: ''	poolDictionaries: ''	category: 'Tp1-Ing1-Tests'!!TestsSistemaDeGestionDePozos methodsFor: 'Asserting' stamp: 'JuanVanecek 4/9/2017 16:58'!assertTheOnlyOneIn: aCollection is: anElement 		self assert: aCollection size equals: 1. 	self assert: aCollection first equals: anElement! !!TestsSistemaDeGestionDePozos methodsFor: 'Asserting' stamp: 'JuanVanecek 4/9/2017 12:21'!assertIsEmpty: aCollection 	self assert: aCollection isEmpty! !!TestsSistemaDeGestionDePozos methodsFor: 'Accessing' stamp: 'JuanVanecek 4/16/2017 16:47'!unaPlantaProcesadora			^ PlantaProcesadora 		construidaEnDias: 20 		conUnCostoTotalDe: 10000 		procesandoUnVolumenDiarioDe: 50.	! !!TestsSistemaDeGestionDePozos methodsFor: 'Accessing' stamp: 'JuanVanecek 5/1/2017 17:07'!pozoConstruidoEnDias: unaCantidadDeDias empezandoEl: unaFecha		| plantaProcesadora parcela excavadora | 	plantaProcesadora := self unaPlantaProcesadora.	parcela := self parcelaLibreConUnaResistenciaDe: 0 yDistanciaAlReservorio: unaCantidadDeDias.	excavadora := ExcavadoraRig perforandoEnMetrosEnUnDia: 1 consumiendoEnLitros: 5.		^ sistemaDeGestion construirUnPozoEn: parcela conectadaA: plantaProcesadora con: excavadora arrancandoEl: self diaDeHoy.! !!TestsSistemaDeGestionDePozos methodsFor: 'Accessing' stamp: 'JuanVanecek 5/1/2017 13:46'!defaultAlpha1	^ 0.5! !!TestsSistemaDeGestionDePozos methodsFor: 'Accessing' stamp: 'JuanVanecek 5/1/2017 13:46'!defaultAlpha2	^ 0.01! !!TestsSistemaDeGestionDePozos methodsFor: 'Accessing' stamp: 'JuanVanecek 4/9/2017 17:27'!parcelaLibreConUnaResistenciaDe: unPorcentaje yDistanciaAlReservorio: unaDistanciaEnMetros	^ yacimiento 		parcelaLibreDeTipo: (MantoGeologico conocidoComo: 'manto' ofreciendoUnaResistenciaDel: unPorcentaje)		presionInicial: 500 		yDistanciaAlReservorio: unaDistanciaEnMetros! !!TestsSistemaDeGestionDePozos methodsFor: 'Accessing' stamp: 'JuanVanecek 4/9/2017 12:07'!diaDeHoy	^ Date today! !!TestsSistemaDeGestionDePozos methodsFor: 'Testing' stamp: 'JuanVanecek 5/1/2017 10:32'!testUnPozoEstaDisponibleDespuesDeConstruido	| plantaProcesadora parcela excavadora pozo | 		plantaProcesadora := self unaPlantaProcesadora.	parcela := self parcelaLibreConUnaResistenciaDe: 0 yDistanciaAlReservorio: 11.	excavadora := ExcavadoraRig perforandoEnMetrosEnUnDia: 2 consumiendoEnLitros: 5.	pozo := sistemaDeGestion construirUnPozoEn: parcela conectadaA: plantaProcesadora con: excavadora arrancandoEl: self diaDeHoy.			self 		assertIsEmpty: (sistemaDeGestion pozosConstruidosAl: self diaDeHoy);		assertIsEmpty: (sistemaDeGestion pozosConstruidosAl: self diaDeHoy next);		assertIsEmpty: (sistemaDeGestion pozosConstruidosAl: (self diaDeHoy addDays: 6));		assertTheOnlyOneIn: (sistemaDeGestion pozosConstruidosAl: (self diaDeHoy addDays: 7)) is: pozo.			self 		assert: (sistemaDeGestion estaDisponible: excavadora el: self diaDeHoy previous);		deny: (sistemaDeGestion estaDisponible: excavadora el: self diaDeHoy);		deny: (sistemaDeGestion estaDisponible: excavadora el: (self diaDeHoy addDays: 6));		assert: (sistemaDeGestion estaDisponible: excavadora el: (self diaDeHoy addDays: 7))! !!TestsSistemaDeGestionDePozos methodsFor: 'Testing' stamp: 'JuanVanecek 5/1/2017 12:14'!testUnTanqueDeGasEstaDisponibleDespuesDeConstruido	| tanque planta | 		planta := self unaPlantaProcesadora.	tanque := TanqueDeGas		construidaEnDias: 10		conUnCostoTotalDe: 100000		conectadoA: planta 		conCapacidadDe: 3000.	sistemaDeGestion construirTanqueDeGas: tanque empezandoEl: self diaDeHoy.		self 		assertIsEmpty: (sistemaDeGestion tanquesDeGasConstruidosAl: self diaDeHoy);		assertIsEmpty: (sistemaDeGestion tanquesDeGasConstruidosAl: self diaDeHoy next);		assertIsEmpty: (sistemaDeGestion tanquesDeGasConstruidosAl: (self diaDeHoy addDays: 9));		assertTheOnlyOneIn: (sistemaDeGestion tanquesDeGasConstruidosAl: (self diaDeHoy addDays: 10)) is: tanque;		assertTheOnlyOneIn: (sistemaDeGestion tanquesDeGasConstruidosAl: (self diaDeHoy addDays: 11)) is: tanque.! !!TestsSistemaDeGestionDePozos methodsFor: 'Testing' stamp: 'JuanVanecek 5/1/2017 18:33'!testPresionDeUnPozoAfectadaPorUnaExtraccion	| pozo | 		pozo := self pozoConstruidoEnDias: 6 empezandoEl: self diaDeHoy.		sistemaDeGestion extraerProductoDe: pozo durante: (self diaDeHoy addDays: 7). 		self 		assert: (sistemaDeGestion presionDe: pozo al: (self diaDeHoy addDays: 6)) equals: pozo presionInicial;		assert: (sistemaDeGestion presionDe: pozo al: (self diaDeHoy addDays: 7)) equals: pozo presionInicial;		assert: (sistemaDeGestion presionDe: pozo al: (self diaDeHoy addDays: 8)) equals: (pozo presionInicial / (Float e ** 0.1))! !!TestsSistemaDeGestionDePozos methodsFor: 'Testing' stamp: 'JuanVanecek 5/1/2017 12:14'!testUnTanqueDeAguaEstaDisponibleDespuesDeConstruido	| tanque planta | 		planta := self unaPlantaProcesadora.	tanque := TanqueDeAgua 		construidaEnDias: 10		conUnCostoTotalDe: 100000		conectadoA: planta 		conCapacidadDe: 3000.	sistemaDeGestion construirTanqueDeAgua: tanque empezandoEl: self diaDeHoy.		self 		assertIsEmpty: (sistemaDeGestion tanquesDeAguaConstruidosAl: self diaDeHoy);		assertIsEmpty: (sistemaDeGestion tanquesDeAguaConstruidosAl: self diaDeHoy next);		assertIsEmpty: (sistemaDeGestion tanquesDeAguaConstruidosAl: (self diaDeHoy addDays: 9));		assertTheOnlyOneIn: (sistemaDeGestion tanquesDeAguaConstruidosAl: (self diaDeHoy addDays: 10)) is: tanque;		assertTheOnlyOneIn: (sistemaDeGestion tanquesDeAguaConstruidosAl: (self diaDeHoy addDays: 11)) is: tanque.! !!TestsSistemaDeGestionDePozos methodsFor: 'Testing' stamp: 'JuanVanecek 5/1/2017 10:32'!testResistenciaDelTerrenoAfectaTrabajoDePerforacion	| plantaProcesadora parcela excavadora pozo | 		plantaProcesadora := self unaPlantaProcesadora.	parcela := self parcelaLibreConUnaResistenciaDe: 0.5 yDistanciaAlReservorio: 11.	excavadora := ExcavadoraRig perforandoEnMetrosEnUnDia: 2 consumiendoEnLitros: 5.	pozo := sistemaDeGestion construirUnPozoEn: parcela conectadaA: plantaProcesadora con: excavadora arrancandoEl: self diaDeHoy.	self 		assertIsEmpty: (sistemaDeGestion pozosConstruidosAl: self diaDeHoy);		assertIsEmpty: (sistemaDeGestion pozosConstruidosAl: self diaDeHoy next);		assertIsEmpty: (sistemaDeGestion pozosConstruidosAl: (self diaDeHoy addDays: 9));		assertTheOnlyOneIn: (sistemaDeGestion pozosConstruidosAl: (self diaDeHoy addDays: 10)) is: pozo.			self 		assert: (sistemaDeGestion estaDisponible: excavadora el: self diaDeHoy previous);		deny: (sistemaDeGestion estaDisponible: excavadora el: self diaDeHoy);		deny: (sistemaDeGestion estaDisponible: excavadora el: (self diaDeHoy addDays: 9));		assert: (sistemaDeGestion estaDisponible: excavadora el: (self diaDeHoy addDays: 10))! !!TestsSistemaDeGestionDePozos methodsFor: 'Testing' stamp: 'JuanVanecek 5/1/2017 17:08'!testNoSePuedeExtraerDeUnPozoSinTerminar	| pozo | 		pozo := self pozoConstruidoEnDias: 6 empezandoEl: self diaDeHoy.			self 		should: [ sistemaDeGestion extraerProductoDe: pozo durante: (self diaDeHoy addDays: 6) ] 		raise: ConstruccionIncompleta 		description: ('No se puede extraer producto de {1} porque al {2} no esta terminado aun' format: { pozo . self diaDeHoy })! !!TestsSistemaDeGestionDePozos methodsFor: 'Testing' stamp: 'JuanVanecek 5/1/2017 17:38'!testElPotencialDeProductoExtraidoAlPrimerDia	| pozo potencialDia1 presionDia1 | 	pozo := self pozoConstruidoEnDias: 6 empezandoEl: self diaDeHoy .	potencialDia1 := sistemaDeGestion potencialDiarioDe: pozo al: (self diaDeHoy addDays: 7).		presionDia1 := sistemaDeGestion presionDe: pozo al: (self diaDeHoy addDays: 7) . 	self assert: potencialDia1 equals: (self defaultAlpha1 * presionDia1 + (self defaultAlpha2 * (presionDia1 ** 2))). ! !!TestsSistemaDeGestionDePozos methodsFor: 'Testing' stamp: 'JuanVanecek 5/1/2017 10:32'!testUnaPlantaProcesadoraEstaDisponibleDespuesDeConstruida	| plantaProcesadora | 		plantaProcesadora := self unaPlantaProcesadora.	sistemaDeGestion construirUnaPlantaProcesadora: plantaProcesadora arrancandoEl: self diaDeHoy.			self 		assertIsEmpty: (sistemaDeGestion plantasProcesadorasConstruidasAl: self diaDeHoy);		assertIsEmpty: (sistemaDeGestion plantasProcesadorasConstruidasAl: (self diaDeHoy addDays: plantaProcesadora tiempoDeConstruccion));		assertTheOnlyOneIn: (sistemaDeGestion plantasProcesadorasConstruidasAl: (self diaDeHoy addDays: plantaProcesadora tiempoDeConstruccion + 1))			is: plantaProcesadora.! !!TestsSistemaDeGestionDePozos methodsFor: 'SetUp' stamp: 'JuanVanecek 5/1/2017 13:45'!setUp	super setUp. 		sistemaDeGestion := 		SistemaDeGestionDePozos calcuandoPresionCon: (			CalculadoraDefaultDePresiones				usandoComoAlpha1: self defaultAlpha1				comoAlpha2: self defaultAlpha2		).		self setUpYacimiento.! !!TestsSistemaDeGestionDePozos methodsFor: 'SetUp' stamp: 'JuanVanecek 5/1/2017 16:01'!setUpYacimiento		yacimiento := Yacimiento 		deTamanioEnHectareas: 5		volumenDeProducto: 10000000		compuestoPorAguaEn: 10		porGasEn: 20		yEnPetroleo: 70.			! !