TestCase subclass: #TestsSistemaDeConstruccionDePozos	instanceVariableNames: 'sistemaDeConstruccion yacimiento simulador'	classVariableNames: ''	poolDictionaries: ''	category: 'Tp1-Ing1-Tests'!!TestsSistemaDeConstruccionDePozos methodsFor: 'private-asserting' stamp: 'JuanVanecek 4/9/2017 12:21'!assertIsEmpty: aCollection 	self assert: aCollection isEmpty! !!TestsSistemaDeConstruccionDePozos methodsFor: 'private-asserting' stamp: 'JuanVanecek 4/9/2017 16:58'!assertTheOnlyOneIn: aCollection is: anElement 		self assert: aCollection size equals: 1. 	self assert: aCollection first equals: anElement! !!TestsSistemaDeConstruccionDePozos methodsFor: 'testing' stamp: 'JuanVanecek 5/7/2017 07:12'!testUnTanqueDeAguaEstaDisponibleDespuesDeConstruido	| tanque planta | 		planta := self unaPlantaProcesadora.	tanque := TanqueDeAgua 		construidaEnDias: 10		conUnCostoTotalDe: 100000		conectadoA: planta 		conCapacidadDe: 3000.	sistemaDeConstruccion construirTanqueDeAgua: tanque empezandoEl: self diaDeHoy.		self 		assertIsEmpty: (sistemaDeConstruccion tanquesDeAguaConstruidosAl: self diaDeHoy);		assertIsEmpty: (sistemaDeConstruccion tanquesDeAguaConstruidosAl: self diaDeHoy next);		assertIsEmpty: (sistemaDeConstruccion tanquesDeAguaConstruidosAl: (self diaDeHoy addDays: 9));		assertTheOnlyOneIn: (sistemaDeConstruccion tanquesDeAguaConstruidosAl: (self diaDeHoy addDays: 10)) is: tanque;		assertTheOnlyOneIn: (sistemaDeConstruccion tanquesDeAguaConstruidosAl: (self diaDeHoy addDays: 11)) is: tanque.! !!TestsSistemaDeConstruccionDePozos methodsFor: 'testing' stamp: 'JuanVanecek 5/7/2017 07:12'!testResistenciaDelTerrenoAfectaTrabajoDePerforacion	| plantaProcesadora parcela excavadora pozo | 		plantaProcesadora := self unaPlantaProcesadora.	parcela := self parcelaLibreConUnaResistenciaDe: 0.5 yDistanciaAlReservorio: 11.	excavadora := ExcavadoraRig perforandoEnMetrosEnUnDia: 2 consumiendoEnLitros: 5.	pozo := sistemaDeConstruccion construirUnPozoEn: parcela conectadaA: plantaProcesadora con: excavadora arrancandoEl: self diaDeHoy.	self 		assertIsEmpty: (sistemaDeConstruccion pozosConstruidosAl: self diaDeHoy);		assertIsEmpty: (sistemaDeConstruccion pozosConstruidosAl: self diaDeHoy next);		assertIsEmpty: (sistemaDeConstruccion pozosConstruidosAl: (self diaDeHoy addDays: 9));		assertTheOnlyOneIn: (sistemaDeConstruccion pozosConstruidosAl: (self diaDeHoy addDays: 10)) is: pozo.			self 		assert: (sistemaDeConstruccion estaDisponible: excavadora el: self diaDeHoy previous);		deny: (sistemaDeConstruccion estaDisponible: excavadora el: self diaDeHoy);		deny: (sistemaDeConstruccion estaDisponible: excavadora el: (self diaDeHoy addDays: 9));		assert: (sistemaDeConstruccion estaDisponible: excavadora el: (self diaDeHoy addDays: 10))! !!TestsSistemaDeConstruccionDePozos methodsFor: 'testing' stamp: 'JuanVanecek 5/17/2017 21:58'!testCapacidadTotalDeGasDeUnaPlantaEstaDadaPorLosTanquesConstruidos	| planta tanque1 tanque2 | 		planta := self unaPlantaProcesadora.	tanque1 := self tanqueDeGasConectadaA: planta conCapacidad: 3000 construidaEl: self diaDeHoy yTerminadaEnDias: 4. 	tanque2 := self tanqueDeGasConectadaA: planta conCapacidad: 2000 construidaEl: self diaDeHoy yTerminadaEnDias: 6. 		self 		assert: (sistemaDeConstruccion capacidadTotalDeGasDe: planta a: self diaDeHoy) equals: 0;		assert: (sistemaDeConstruccion capacidadTotalDeGasDe: planta a: self diaDeHoy next) equals: 0;		assert: (sistemaDeConstruccion capacidadTotalDeGasDe: planta a: (self diaDeHoy addDays: 4)) equals: tanque1 capacidadTotal;		assert: (sistemaDeConstruccion capacidadTotalDeGasDe: planta a: (self diaDeHoy addDays: 5)) equals: tanque1 capacidadTotal;		assert: (sistemaDeConstruccion capacidadTotalDeGasDe: planta a: (self diaDeHoy addDays: 6)) equals: tanque1 capacidadTotal + tanque2 capacidadTotal! !!TestsSistemaDeConstruccionDePozos methodsFor: 'testing' stamp: 'JuanVanecek 5/7/2017 07:12'!testUnaPlantaProcesadoraEstaDisponibleDespuesDeConstruida	| plantaProcesadora | 		plantaProcesadora := self unaPlantaProcesadora.	sistemaDeConstruccion construirUnaPlantaProcesadora: plantaProcesadora arrancandoEl: self diaDeHoy.			self 		assertIsEmpty: (sistemaDeConstruccion plantasProcesadorasConstruidasAl: self diaDeHoy);		assertIsEmpty: (sistemaDeConstruccion plantasProcesadorasConstruidasAl: (self diaDeHoy addDays: plantaProcesadora tiempoDeConstruccion));		assertTheOnlyOneIn: (sistemaDeConstruccion plantasProcesadorasConstruidasAl: (self diaDeHoy addDays: plantaProcesadora tiempoDeConstruccion + 1))			is: plantaProcesadora.! !!TestsSistemaDeConstruccionDePozos methodsFor: 'testing' stamp: 'JuanVanecek 5/17/2017 22:10'!testCapacidadTotalDeAguaDeUnaPlantaEstaDadaPorLosTanquesConstruidos	| planta tanque1 tanque2 | 		planta := self unaPlantaProcesadora.	tanque1 := self tanqueDeAguaConectadaA: planta conCapacidad: 3000 construidaEl: self diaDeHoy yTerminadaEnDias: 4. 	tanque2 := self tanqueDeAguaConectadaA: planta conCapacidad: 2000 construidaEl: self diaDeHoy yTerminadaEnDias: 7. 		self 		assert: (sistemaDeConstruccion capacidadTotalDeAguaDe: planta a: self diaDeHoy) equals: 0;		assert: (sistemaDeConstruccion capacidadTotalDeAguaDe: planta a: self diaDeHoy next) equals: 0;		assert: (sistemaDeConstruccion capacidadTotalDeAguaDe: planta a: (self diaDeHoy addDays: 4)) equals: tanque1 capacidadTotal;		assert: (sistemaDeConstruccion capacidadTotalDeAguaDe: planta a: (self diaDeHoy addDays: 5)) equals: tanque1 capacidadTotal;		assert: (sistemaDeConstruccion capacidadTotalDeAguaDe: planta a: (self diaDeHoy addDays: 6)) equals: tanque1 capacidadTotal;		assert: (sistemaDeConstruccion capacidadTotalDeAguaDe: planta a: (self diaDeHoy addDays: 7)) equals: tanque1 capacidadTotal + tanque2 capacidadTotal! !!TestsSistemaDeConstruccionDePozos methodsFor: 'testing' stamp: 'JuanVanecek 5/7/2017 18:40'!testUnRIGPuedeSerUtilizadaDuranteUnaSolaExcavacion	| plantaProcesadora parcela1 parcela2 excavadora | 	plantaProcesadora := self unaPlantaProcesadora.	parcela1 := self parcelaLibreConUnaResistenciaDe: 0 yDistanciaAlReservorio: 11.	parcela2 := self parcelaLibreConUnaResistenciaDe: 0 yDistanciaAlReservorio: 9.	excavadora := ExcavadoraRig perforandoEnMetrosEnUnDia: 2 consumiendoEnLitros: 5.	sistemaDeConstruccion construirUnPozoEn: parcela1 conectadaA: plantaProcesadora con: excavadora arrancandoEl: self diaDeHoy.		self 		should: [ 			sistemaDeConstruccion construirUnPozoEn: parcela2 conectadaA: plantaProcesadora con: excavadora arrancandoEl: self diaDeHoy ]		raise: ConstruccionInvalida ! !!TestsSistemaDeConstruccionDePozos methodsFor: 'testing' stamp: 'JuanVanecek 5/7/2017 07:12'!testUnPozoEstaDisponibleDespuesDeConstruido	| plantaProcesadora parcela excavadora pozo | 		plantaProcesadora := self unaPlantaProcesadora.	parcela := self parcelaLibreConUnaResistenciaDe: 0 yDistanciaAlReservorio: 11.	excavadora := ExcavadoraRig perforandoEnMetrosEnUnDia: 2 consumiendoEnLitros: 5.	pozo := sistemaDeConstruccion construirUnPozoEn: parcela conectadaA: plantaProcesadora con: excavadora arrancandoEl: self diaDeHoy.			self 		assertIsEmpty: (sistemaDeConstruccion pozosConstruidosAl: self diaDeHoy);		assertIsEmpty: (sistemaDeConstruccion pozosConstruidosAl: self diaDeHoy next);		assertIsEmpty: (sistemaDeConstruccion pozosConstruidosAl: (self diaDeHoy addDays: 6));		assertTheOnlyOneIn: (sistemaDeConstruccion pozosConstruidosAl: (self diaDeHoy addDays: 7)) is: pozo.			self 		assert: (sistemaDeConstruccion estaDisponible: excavadora el: self diaDeHoy previous);		deny: (sistemaDeConstruccion estaDisponible: excavadora el: self diaDeHoy);		deny: (sistemaDeConstruccion estaDisponible: excavadora el: (self diaDeHoy addDays: 6));		assert: (sistemaDeConstruccion estaDisponible: excavadora el: (self diaDeHoy addDays: 7))! !!TestsSistemaDeConstruccionDePozos methodsFor: 'testing' stamp: 'JuanVanecek 5/7/2017 07:12'!testUnTanqueDeGasEstaDisponibleDespuesDeConstruido	| tanque planta | 		planta := self unaPlantaProcesadora.	tanque := TanqueDeGas		construidaEnDias: 10		conUnCostoTotalDe: 100000		conectadoA: planta 		conCapacidadDe: 3000.	sistemaDeConstruccion construirTanqueDeGas: tanque empezandoEl: self diaDeHoy.		self 		assertIsEmpty: (sistemaDeConstruccion tanquesDeGasConstruidosAl: self diaDeHoy);		assertIsEmpty: (sistemaDeConstruccion tanquesDeGasConstruidosAl: self diaDeHoy next);		assertIsEmpty: (sistemaDeConstruccion tanquesDeGasConstruidosAl: (self diaDeHoy addDays: 9));		assertTheOnlyOneIn: (sistemaDeConstruccion tanquesDeGasConstruidosAl: (self diaDeHoy addDays: 10)) is: tanque;		assertTheOnlyOneIn: (sistemaDeConstruccion tanquesDeGasConstruidosAl: (self diaDeHoy addDays: 11)) is: tanque.! !!TestsSistemaDeConstruccionDePozos methodsFor: 'setup' stamp: 'JuanVanecek 5/7/2017 13:37'!setUp	super setUp. 		sistemaDeConstruccion := SistemaDeConstruccionDePozos comoParteDe: SistemaDeSimulacion new.		self setUpYacimiento.! !!TestsSistemaDeConstruccionDePozos methodsFor: 'setup' stamp: 'JuanVanecek 5/19/2017 00:33'!setUpYacimiento		yacimiento := 		Yacimiento 			deTamanioEnHectareas: 5			volumenDeProducto: 10000000			compuestoPor: (				ComposicionPorcentualDeReservorio					gas: 20					agua: 10).		! !!TestsSistemaDeConstruccionDePozos methodsFor: 'private-accessing' stamp: 'JuanVanecek 4/9/2017 17:27'!parcelaLibreConUnaResistenciaDe: unPorcentaje yDistanciaAlReservorio: unaDistanciaEnMetros	^ yacimiento 		parcelaLibreDeTipo: (MantoGeologico conocidoComo: 'manto' ofreciendoUnaResistenciaDel: unPorcentaje)		presionInicial: 500 		yDistanciaAlReservorio: unaDistanciaEnMetros! !!TestsSistemaDeConstruccionDePozos methodsFor: 'private-accessing' stamp: 'JuanVanecek 4/9/2017 12:07'!diaDeHoy	^ Date today! !!TestsSistemaDeConstruccionDePozos methodsFor: 'private-accessing' stamp: 'JuanVanecek 4/16/2017 16:47'!unaPlantaProcesadora			^ PlantaProcesadora 		construidaEnDias: 20 		conUnCostoTotalDe: 10000 		procesandoUnVolumenDiarioDe: 50.	! !!TestsSistemaDeConstruccionDePozos methodsFor: 'private-accessing' stamp: 'JuanVanecek 5/17/2017 22:05'!tanqueDeGasConectadaA: unaPlanta conCapacidad: unaCantidadDeGas construidaEl: diaConstruccion yTerminadaEnDias: diasFinalizado		| tanque | 		tanque := TanqueDeGas		construidaEnDias: diasFinalizado		conUnCostoTotalDe: 100000		conectadoA: unaPlanta 		conCapacidadDe: unaCantidadDeGas.			sistemaDeConstruccion construirTanqueDeGas: tanque empezandoEl: diaConstruccion. 	^ tanque! !!TestsSistemaDeConstruccionDePozos methodsFor: 'private-accessing' stamp: 'JuanVanecek 5/17/2017 22:07'!tanqueDeAguaConectadaA: unaPlanta conCapacidad: unaCantidadDeAgua construidaEl: diaConstruccion yTerminadaEnDias: diasFinalizado		| tanque | 		tanque := TanqueDeAgua		construidaEnDias: diasFinalizado		conUnCostoTotalDe: 100000		conectadoA: unaPlanta 		conCapacidadDe: unaCantidadDeAgua.			sistemaDeConstruccion construirTanqueDeAgua: tanque empezandoEl: diaConstruccion. 	^ tanque! !!TestsSistemaDeConstruccionDePozos methodsFor: 'private-accessing' stamp: 'JuanVanecek 5/19/2017 18:45'!pozoConPresionInicial: unaPresion 	construidoEnDias: unaCantidadDeDias 	empezando: unaFecha		| plantaProcesadora parcela excavadora | 	plantaProcesadora := self unaPlantaProcesadora.	parcela := self parcelaLibreConUnaPresion: unaPresion resistenciaDe: 0 yDistanciaAlReservorio: unaCantidadDeDias.	excavadora := ExcavadoraRig perforandoEnMetrosEnUnDia: 1 consumiendoEnLitros: 5.		^ sistemaDeConstruccion construirUnPozoEn: parcela conectadaA: plantaProcesadora con: excavadora arrancandoEl: self diaDeHoy.! !TestCase subclass: #TestsSistemaDeEjecucionDeCriterios	instanceVariableNames: 'yacimiento sistemaDeEjecucionDeCriterios sistemaDeConstruccion sistemaDeGestionDeExcavadoras sistemaDeGestionDeParcelas'	classVariableNames: ''	poolDictionaries: ''	category: 'Tp1-Ing1-Tests'!!TestsSistemaDeEjecucionDeCriterios methodsFor: 'setup' stamp: 'JuanVanecek 5/7/2017 15:06'!setUpPlantaProcesadora	sistemaDeConstruccion 		construirUnaPlantaProcesadora: (			PlantaProcesadora 				construidaEnDias: 0 				conUnCostoTotalDe: 10000 				procesandoUnVolumenDiarioDe: 50) 		arrancandoEl: (self diaDeHoy subtractDays: 1).! !!TestsSistemaDeEjecucionDeCriterios methodsFor: 'setup' stamp: 'MonsiCapa 5/22/2017 20:12'!setUp		| simulador | 		super setUp. 		simulador := SistemaDeSimulacion new.	sistemaDeEjecucionDeCriterios := SistemaDeEjecucionDeCriterios comoParteDe: simulador.	sistemaDeGestionDeExcavadoras := SistemaDeGestionDeExcavadoras comoParteDe: simulador.	sistemaDeGestionDeParcelas := SistemaDeGestionDeParcelas comoParteDe: simulador.	sistemaDeConstruccion := SistemaDeConstruccionDePozos comoParteDe: simulador.		self 		setUpYacimiento;		setUpPlantaProcesadora.! !!TestsSistemaDeEjecucionDeCriterios methodsFor: 'setup' stamp: 'MonsiCapa 5/22/2017 20:16'!setUpYacimiento		yacimiento := 		Yacimiento 			deTamanioEnHectareas: 5			volumenDeProducto: 10000000			compuestoPor: (				ComposicionPorcentualDeReservorio					gas: 20					agua: 10).						sistemaDeGestionDeParcelas usarComoFuenteDeParcelasA: yacimiento! !!TestsSistemaDeEjecucionDeCriterios methodsFor: 'testing' stamp: 'MonsiCapa 5/22/2017 17:48'!testConstruir3PozosCon3ExcavadoraEnLasParcelasMenosProfundas	| criterio | 		self 		habilitarExcavadoraQueCavaPorMetrosDia: 3;		habilitarExcavadoraQueCavaPorMetrosDia: 5;		habilitarExcavadoraQueCavaPorMetrosDia: 4;		crearParcelaEn: yacimiento deProfundidad: 40;		crearParcelaEn: yacimiento deProfundidad: 30;		crearParcelaEn: yacimiento deProfundidad: 20;		crearParcelaEn: yacimiento deProfundidad: 10.			criterio := CriterioDeConstruccion construir: 3 pozosEnLasParcelasMenosProfundasDe: yacimiento.		sistemaDeEjecucionDeCriterios ejecutar: criterio. 	" construcciones en el dia 10/5, 20/4, 30/3"	self 		assert: (sistemaDeConstruccion pozosConstruidosAl: self diaDeHoy) size equals: 0;		assert: (sistemaDeConstruccion pozosConstruidosAl: (self diaDeHoy addDays: 2)) size equals: 0;		assert: (sistemaDeConstruccion pozosConstruidosAl: (self diaDeHoy addDays: 3)) size equals: 1;		assert: (sistemaDeConstruccion pozosConstruidosAl: (self diaDeHoy addDays: 5)) size equals: 1;		assert: (sistemaDeConstruccion pozosConstruidosAl: (self diaDeHoy addDays: 6)) size equals: 2;		assert: (sistemaDeConstruccion pozosConstruidosAl: (self diaDeHoy addDays: 10)) size equals: 2;		assert: (sistemaDeConstruccion pozosConstruidosAl: (self diaDeHoy addDays: 11)) size equals: 3! !!TestsSistemaDeEjecucionDeCriterios methodsFor: 'testing' stamp: 'MonsiCapa 5/22/2017 20:24'!testParaconstruir3pozos	| criterio | 		self 		habilitarExcavadoraQueCavaPorMetrosDia: 3;		habilitarExcavadoraQueCavaPorMetrosDia: 5;		habilitarExcavadoraQueCavaPorMetrosDia: 4;		crearParcelaEn: yacimiento deProfundidad: 40;		crearParcelaEn: yacimiento deProfundidad: 30;		crearParcelaEn: yacimiento deProfundidad: 20;		crearParcelaEn: yacimiento deProfundidad: 10.			criterio := CriterioDeConstruccion construir: 3 seleccionandoParcelasCon: ParcelasMenosProfundasStrategy new yExcavadorasCon: EstrategiaDeAlquilerADemanda new.		sistemaDeEjecucionDeCriterios ejecutar: criterio. 	" construcciones en el dia 10/5, 20/4, 30/3"	self assert: sistemaDeConstruccion planesDeConstruccionDePozos size equals: 3! !!TestsSistemaDeEjecucionDeCriterios methodsFor: 'testing' stamp: 'MonsiCapa 5/22/2017 20:25'!testParaConstruir4pozos	| criterio | 		self 		habilitarExcavadoraQueCavaPorMetrosDia: 3;		habilitarExcavadoraQueCavaPorMetrosDia: 5;		habilitarExcavadoraQueCavaPorMetrosDia: 4;		crearParcelaEn: yacimiento deProfundidad: 40;		crearParcelaEn: yacimiento deProfundidad: 30;		crearParcelaEn: yacimiento deProfundidad: 20;		crearParcelaEn: yacimiento deProfundidad: 10.			criterio := CriterioDeConstruccion construir: 4 seleccionandoParcelasCon: ParcelasMenosProfundasStrategy new yExcavadorasCon: EstrategiaDeAlquilerADemanda new.		sistemaDeEjecucionDeCriterios ejecutar: criterio. 	" construcciones en el dia 10/5, 20/4, 30/3"	self assert: sistemaDeConstruccion planesDeConstruccionDePozos size equals: 3! !!TestsSistemaDeEjecucionDeCriterios methodsFor: 'private-accessing' stamp: 'JuanVanecek 5/7/2017 14:28'!crearParcelaEn: unYacimiento deProfundidad: unaDistanciaEnMetros	unYacimiento 		parcelaLibreDeTipo: (MantoGeologico conocidoComo: 'terreno' ofreciendoUnaResistenciaDel: 0)		presionInicial: 1000 		yDistanciaAlReservorio: unaDistanciaEnMetros	! !!TestsSistemaDeEjecucionDeCriterios methodsFor: 'private-accessing' stamp: 'JuanVanecek 5/7/2017 14:39'!diaDeHoy	^ Date today! !!TestsSistemaDeEjecucionDeCriterios methodsFor: 'private-accessing' stamp: 'JuanVanecek 5/7/2017 14:23'!habilitarExcavadoraQueCavaPorMetrosDia: unaMedidaEnMetros 	sistemaDeGestionDeExcavadoras 		registrar: (				ExcavadoraRig 				perforandoEnMetrosEnUnDia: unaMedidaEnMetros 				consumiendoEnLitros: 1) 		conUnCostoPorDia: 100 		porUnMinimoDeDias: 1! !TestCase subclass: #TestsSistemaDeExtraccionDePozos	instanceVariableNames: 'sistemaDeExtraccion yacimiento simulador sistemaDeConstruccion plantaProcesadora'	classVariableNames: ''	poolDictionaries: ''	category: 'Tp1-Ing1-Tests'!!TestsSistemaDeExtraccionDePozos methodsFor: 'testing - extracciones' stamp: 'JuanVanecek 5/20/2017 15:25'!testSiNoHayExtraccionesLaCapacidadDisponibleDeAguayGasEsIgualAlTotal		| planta | 		planta := self unaPlantaProcesadora. 		self 		assert: (sistemaDeExtraccion capacidadLibreParaAguaEn: planta a: self diaDeHoy)		equals: (sistemaDeConstruccion capacidadTotalDeAguaDe: planta a: self diaDeHoy).	self 		assert: (sistemaDeExtraccion capacidadLibreParaGasEn: planta a: self diaDeHoy)		equals: (sistemaDeConstruccion capacidadTotalDeGasDe: planta a: self diaDeHoy)! !!TestsSistemaDeExtraccionDePozos methodsFor: 'testing - extracciones' stamp: 'JuanVanecek 5/21/2017 19:34'!testNoSePuedeExtraerSiNoHayEspacioDisponibleParaLosDeshechos	| pozo1 pozo2 extraidoDePozo1 extraidoDePozo2 planta | 		planta := self plantaQueProcesaDiariamente: 999 construidaEnDias: 1 arrancando: self diaDeHoy previous. 	pozo1 := self pozoConstruidoEnDias: 5 empezando: self diaDeHoy conectadaA: planta.	pozo2 := self pozoConstruidoEnDias: 6 empezando: self diaDeHoy conectadaA: planta.		self should: [ sistemaDeExtraccion extraerProductoDe: pozo1 en: (self diaDeHoy addDays: 6) ] raise: ExtraccionInvalida.	self should: [ sistemaDeExtraccion extraerProductoDe: pozo2 en: (self diaDeHoy addDays: 7) ] raise: ExtraccionInvalida.		extraidoDePozo1 := sistemaDeExtraccion productoExtraidoDe: pozo1 a: (self diaDeHoy addDays: 6).		extraidoDePozo2 := sistemaDeExtraccion productoExtraidoDe: pozo2 a: (self diaDeHoy addDays: 7).			self		assert: extraidoDePozo1 cantidadProducto equals: 0;		assert: extraidoDePozo2 cantidadProducto equals: 0! !!TestsSistemaDeExtraccionDePozos methodsFor: 'testing - extracciones' stamp: 'JuanVanecek 5/21/2017 18:16'!testLaCapacidadDeAguayGasDisminuyeConCadaExtraccion	| pozo1 pozo2 extraidoDePozo1 extraidoDePozo2 planta | 		planta := self plantaQueProcesaDiariamente: 999 construidaEnDias: 1 arrancando: self diaDeHoy previous. 		self 		construirTanqueDeAguaDe: 4000 conectadoA: planta enDia: 1 arrancando: self diaDeHoy previous;		construirTanqueDeGasDe: 5000 conectadoA: planta enDia: 1 arrancando: self diaDeHoy previous.		pozo1 := self pozoConUnaPresionInicial: 500 construidoEnDias: 5 empezando: self diaDeHoy conectadaA: planta.	pozo2 := self pozoConUnaPresionInicial: 600 construidoEnDias: 6 empezando: self diaDeHoy conectadaA: planta.		self 		assert: (sistemaDeExtraccion capacidadLibreParaAguaEn: planta a: (self diaDeHoyMas: 9)) equals: 4000;		assert: (sistemaDeExtraccion capacidadLibreParaGasEn: planta a: (self diaDeHoyMas: 9)) equals: 5000;		assert: (sistemaDeExtraccion capacidadLibreParaAguaEn: planta a: (self diaDeHoyMas: 10)) equals: 4000;		assert: (sistemaDeExtraccion capacidadLibreParaGasEn: planta a: (self diaDeHoyMas: 10)) equals: 5000.		sistemaDeExtraccion extraerProductoDe: pozo1 en: (self diaDeHoyMas: 10).	extraidoDePozo1 := sistemaDeExtraccion productoExtraidoDe: pozo1 a: (self diaDeHoyMas: 10). 		self 		assert: (sistemaDeExtraccion capacidadLibreParaAguaEn: planta a: (self diaDeHoyMas: 9)) equals: 4000;		assert: (sistemaDeExtraccion capacidadLibreParaGasEn: planta a: (self diaDeHoyMas: 9)) equals: 5000;		assert: (sistemaDeExtraccion capacidadLibreParaAguaEn: planta a: (self diaDeHoyMas: 10)) 	equals: 4000 - (extraidoDePozo1 cantidadDeAgua);		assert: (sistemaDeExtraccion capacidadLibreParaGasEn: planta a: (self diaDeHoyMas: 10)) equals: 5000 - (extraidoDePozo1 cantidadDeGas);		assert: (sistemaDeExtraccion capacidadLibreParaAguaEn: planta a: (self diaDeHoyMas: 12)) 	equals: 4000 - (extraidoDePozo1 cantidadDeAgua);		assert: (sistemaDeExtraccion capacidadLibreParaGasEn: planta a: (self diaDeHoyMas: 12)) equals: 5000 - (extraidoDePozo1 cantidadDeGas).		sistemaDeExtraccion extraerProductoDe: pozo2 en: (self diaDeHoyMas: 12).	extraidoDePozo2 := sistemaDeExtraccion productoExtraidoDe: pozo2 a: (self diaDeHoyMas: 12).			self 		assert: (sistemaDeExtraccion capacidadLibreParaAguaEn: planta a: (self diaDeHoyMas: 9)) equals: 4000;		assert: (sistemaDeExtraccion capacidadLibreParaGasEn: planta a: (self diaDeHoyMas: 9)) equals: 5000;		assert: (sistemaDeExtraccion capacidadLibreParaAguaEn: planta a: (self diaDeHoyMas: 10)) 	equals: 4000 - (extraidoDePozo1 cantidadDeAgua);		assert: (sistemaDeExtraccion capacidadLibreParaGasEn: planta a: (self diaDeHoyMas: 10)) equals: 5000 - (extraidoDePozo1 cantidadDeGas);		assert: (sistemaDeExtraccion capacidadLibreParaAguaEn: planta a: (self diaDeHoyMas: 12)) 				equals: 4000 - (extraidoDePozo1 cantidadDeAgua) - (extraidoDePozo2 cantidadDeAgua);		assert: (sistemaDeExtraccion capacidadLibreParaGasEn: planta a: (self diaDeHoyMas: 12)) 			equals: 5000 - (extraidoDePozo1 cantidadDeGas) - (extraidoDePozo2 cantidadDeGas).! !!TestsSistemaDeExtraccionDePozos methodsFor: 'testing - extracciones' stamp: 'JuanVanecek 5/18/2017 23:04'!testProductoExtraidoDeDosPozosEnDistintosDias	| pozo1 pozo2 extraidoPozo1 extraidoPozo2 presionPozo2 | 	pozo1 := self pozoConstruidoEnDias: 5 empezando: self diaDeHoy.	pozo2 := self pozoConstruidoEnDias: 6 empezando: self diaDeHoy.		sistemaDeExtraccion extraerProductoDe: pozo1 en: (self diaDeHoy addDays: 6).	sistemaDeExtraccion extraerProductoDe: pozo2 en: (self diaDeHoy addDays: 7).		extraidoPozo1 := sistemaDeExtraccion productoExtraidoDe: pozo1 a: (self diaDeHoy addDays: 6).		extraidoPozo2 := sistemaDeExtraccion productoExtraidoDe: pozo2 a: (self diaDeHoy addDays: 7).		presionPozo2 := sistemaDeExtraccion presionDe: pozo2 a: (self diaDeHoy addDays: 7).		self		assert: extraidoPozo1 cantidadProducto equals: (self defaultAlpha1 * (pozo1 presionInicial) + (self defaultAlpha2 * (pozo1 presionInicial ** 2)));		assert: extraidoPozo2 cantidadProducto equals: (self defaultAlpha1 * presionPozo2 + (self defaultAlpha2 * (presionPozo2 ** 2))). ! !!TestsSistemaDeExtraccionDePozos methodsFor: 'testing - extracciones' stamp: 'JuanVanecek 5/18/2017 23:05'!testProductoExtraidoDeUnPozoAlPrimerDia	| pozo extraidoDia1 presionDia1 | 	pozo := self pozoConstruidoEnDias: 6 empezando: self diaDeHoy .		sistemaDeExtraccion extraerProductoDe: pozo en: (self diaDeHoy addDays: 7).	extraidoDia1 := sistemaDeExtraccion productoExtraidoDe: pozo a: (self diaDeHoy addDays: 7).		presionDia1 := sistemaDeExtraccion presionDe: pozo a: (self diaDeHoy addDays: 7). 	self assert: extraidoDia1 cantidadProducto equals: (self defaultAlpha1 * presionDia1 + (self defaultAlpha2 * (presionDia1 ** 2))). ! !!TestsSistemaDeExtraccionDePozos methodsFor: 'testing - extracciones' stamp: 'JuanVanecek 5/19/2017 01:04'!testProductoExtraidoDeDosPozosEnDistintosDiasLimitadoPorProcesamientoDePlanta	| pozo1 pozo2 extraidoDePozo1 extraidoDePozo2 plantaConPocoProcesamiento | 		plantaConPocoProcesamiento := self plantaQueProcesaDiariamente: 30 construidaEnDias: 1 arrancando: self diaDeHoy previous.		self 		construirTanqueDeAguaDe: 9999 conectadoA: plantaConPocoProcesamiento enDia: 1 arrancando: self diaDeHoy;		construirTanqueDeGasDe: 9999 conectadoA: plantaConPocoProcesamiento enDia: 1 arrancando: self diaDeHoy..	pozo1 := self pozoConstruidoEnDias: 5 empezando: self diaDeHoy conectadaA: plantaConPocoProcesamiento.	pozo2 := self pozoConstruidoEnDias: 6 empezando: self diaDeHoy conectadaA: plantaConPocoProcesamiento.		sistemaDeExtraccion extraerProductoDe: pozo1 en: (self diaDeHoy addDays: 6).	sistemaDeExtraccion extraerProductoDe: pozo2 en: (self diaDeHoy addDays: 7).		extraidoDePozo1 := sistemaDeExtraccion productoExtraidoDe: pozo1 a: (self diaDeHoy addDays: 6).		extraidoDePozo2 := sistemaDeExtraccion productoExtraidoDe: pozo2 a: (self diaDeHoy addDays: 7).			self		assert: extraidoDePozo1 cantidadProducto equals: plantaConPocoProcesamiento procesamientoDiario;		assert: extraidoDePozo2 cantidadProducto equals: plantaConPocoProcesamiento procesamientoDiario.! !!TestsSistemaDeExtraccionDePozos methodsFor: 'testing - extracciones' stamp: 'JuanVanecek 5/21/2017 18:59'!testNoSePuedeExtraerDeUnPozoSiLaPlantaNoEstaTerminada	| pozo planta | 		planta := self plantaQueProcesaDiariamente: 1000 construidaEnDias: 20 arrancando: self diaDeHoy. 		pozo := self pozoConstruidoEnDias: 2 empezando: self diaDeHoy conectadaA: planta.			self 		should: [ sistemaDeExtraccion extraerProductoDe: pozo en: (self diaDeHoy addDays: 6) ] 		raise: ExtraccionInvalida 		description: ('No se puede extraer producto de {1} porque al {2} no esta terminado aun' format: { pozo . self diaDeHoy })! !!TestsSistemaDeExtraccionDePozos methodsFor: 'testing - extracciones' stamp: 'JuanVanecek 5/18/2017 23:03'!testProductoExtraidoDeDosPozosElPrimerDia	| pozo1 pozo2 extraidoPozo1 extraidoPozo2 | 	pozo1 := self pozoConstruidoEnDias: 6 empezando: self diaDeHoy.	pozo2 := self pozoConstruidoEnDias: 5 empezando: self diaDeHoy.		sistemaDeExtraccion extraerProductoDe: pozo1 en: (self diaDeHoy addDays: 7).	sistemaDeExtraccion extraerProductoDe: pozo2 en: (self diaDeHoy addDays: 7).		extraidoPozo1 := sistemaDeExtraccion productoExtraidoDe: pozo1 a: (self diaDeHoy addDays: 7).		extraidoPozo2 := sistemaDeExtraccion productoExtraidoDe: pozo2 a: (self diaDeHoy addDays: 7).			self		assert: extraidoPozo1 cantidadProducto equals: (self defaultAlpha1 * (pozo1 presionInicial) / 2 + (self defaultAlpha2 * (pozo1 presionInicial ** 2)/4));		assert: extraidoPozo2 cantidadProducto equals: (self defaultAlpha1 * (pozo2 presionInicial) / 2 + (self defaultAlpha2 * (pozo2 presionInicial ** 2)/4)). ! !!TestsSistemaDeExtraccionDePozos methodsFor: 'testing - extracciones' stamp: 'JuanVanecek 5/12/2017 22:32'!testPresionDeUnPozoLuegoDeUnaExtraccion	| pozo | 		pozo := self pozoConstruidoEnDias: 6 empezando: self diaDeHoy.		sistemaDeExtraccion extraerProductoDe: pozo en: (self diaDeHoy addDays: 7). 		self 		assert: (sistemaDeExtraccion presionDe: pozo a: (self diaDeHoy addDays: 6)) equals: pozo presionInicial;		assert: (sistemaDeExtraccion presionDe: pozo a: (self diaDeHoy addDays: 7)) equals: pozo presionInicial;		assert: (sistemaDeExtraccion presionDe: pozo a: (self diaDeHoy addDays: 8)) equals: (pozo presionInicial / (Float e ** 0.1));		assert: (sistemaDeExtraccion presionDe: pozo a: (self diaDeHoy addDays: 9)) equals: (pozo presionInicial / (Float e ** 0.1))! !!TestsSistemaDeExtraccionDePozos methodsFor: 'testing - extracciones' stamp: 'JuanVanecek 5/21/2017 20:04'!testProductoExtraidoEstaLimitadoPorElProcesamientoDeLaPlanta	| pozo productoExtraido plantaConPocoProcesamiento | 		plantaConPocoProcesamiento := self plantaQueProcesaDiariamente: 30 construidaEnDias: 1 arrancando: self diaDeHoy previous.	self 		construirTanqueDeAguaDe: 9999 conectadoA: plantaConPocoProcesamiento enDia: 1 arrancando: self diaDeHoy previous;		construirTanqueDeGasDe: 9999 conectadoA: plantaConPocoProcesamiento enDia: 1 arrancando: self diaDeHoy previous. 		pozo := self pozoConstruidoEnDias: 6 empezando: self diaDeHoy conectadaA: plantaConPocoProcesamiento.		sistemaDeExtraccion extraerProductoDe: pozo en: (self diaDeHoy addDays: 7).		productoExtraido := sistemaDeExtraccion productoExtraidoDe: pozo a: (self diaDeHoy addDays: 7).		self assert: productoExtraido cantidadProducto equals: 30. ! !!TestsSistemaDeExtraccionDePozos methodsFor: 'testing - extracciones' stamp: 'JuanVanecek 5/12/2017 22:59'!testPresionDeUnPozoLuegoDeDosExtraccionesSeguidas	| pozo presionDia2 volumenDia2 | 		pozo := self pozoConstruidoEnDias: 6 empezando: self diaDeHoy.		sistemaDeExtraccion extraerProductoDe: pozo en: (self diaDeHoy addDays: 7). 	sistemaDeExtraccion extraerProductoDe: pozo en: (self diaDeHoy addDays: 8). 	presionDia2 := sistemaDeExtraccion presionDe: pozo a: (self diaDeHoy addDays: 8).	volumenDia2 := yacimiento volumenDeProductoInicial - (sistemaDeExtraccion volumenExtraidoDe: yacimiento a: (self diaDeHoy addDays: 8)).		self 		assert: (sistemaDeExtraccion presionDe: pozo a: (self diaDeHoy addDays: 6)) equals: pozo presionInicial;		assert: (sistemaDeExtraccion presionDe: pozo a: (self diaDeHoy addDays: 7)) equals: pozo presionInicial;		assert: (sistemaDeExtraccion presionDe: pozo a: (self diaDeHoy addDays: 8)) equals: (pozo presionInicial / (Float e ** 0.1));		assert: (sistemaDeExtraccion presionDe: pozo a: (self diaDeHoy addDays: 9)) 			isNear: (presionDia2 / (Float e ** (volumenDia2 / (10 * yacimiento volumenDeProductoInicial))))			withTolerance: 0.01;		assert: (sistemaDeExtraccion presionDe: pozo a: (self diaDeHoy addDays: 10)) 			isNear: (presionDia2 / (Float e ** (volumenDia2 / (10 * yacimiento volumenDeProductoInicial))))			withTolerance: 0.01! !!TestsSistemaDeExtraccionDePozos methodsFor: 'testing - extracciones' stamp: 'JuanVanecek 5/18/2017 23:08'!testVolumenExtraidoAlPrimerDiaConDosPozos	| pozo1 pozo2 volumenExtraidoEsperado | 	pozo1 := self pozoConstruidoEnDias: 6 empezando: self diaDeHoy.	pozo2 := self pozoConstruidoEnDias: 6 empezando: self diaDeHoy.		sistemaDeExtraccion extraerProductoDe: pozo1 en: (self diaDeHoy addDays: 7). 	sistemaDeExtraccion extraerProductoDe: pozo2 en: (self diaDeHoy addDays: 7).		volumenExtraidoEsperado := 		(sistemaDeExtraccion productoExtraidoDe: pozo1 a: (self diaDeHoy addDays: 7)) cantidadProducto + 		(sistemaDeExtraccion productoExtraidoDe: pozo2 a: (self diaDeHoy addDays: 7)) cantidadProducto.			self 		assert: (sistemaDeExtraccion volumenExtraidoDe: yacimiento a: (self diaDeHoy addDays: 6)) equals: 0;		assert: (sistemaDeExtraccion volumenExtraidoDe: yacimiento a: (self diaDeHoy addDays: 7)) equals: volumenExtraidoEsperado! !!TestsSistemaDeExtraccionDePozos methodsFor: 'testing - extracciones' stamp: 'JuanVanecek 5/21/2017 20:33'!testProductoExtraidoEsCeroSiNoHayExtracciones	| pozo productoExtraido presionDia1 | 	pozo := self pozoConstruidoEnDias: 6 empezando: self diaDeHoy .	productoExtraido := sistemaDeExtraccion productoExtraidoDe: pozo a: (self diaDeHoy addDays: 7).		presionDia1 := sistemaDeExtraccion presionDe: pozo a: (self diaDeHoy addDays: 7) . 	self assert: productoExtraido cantidadProducto equals: 0. ! !!TestsSistemaDeExtraccionDePozos methodsFor: 'testing - extracciones' stamp: 'JuanVanecek 5/21/2017 18:59'!testNoSePuedeExtraerDeUnPozoSinTerminar	| pozo | 	pozo := self pozoConstruidoEnDias: 6 empezando: self diaDeHoy.			self 		should: [ sistemaDeExtraccion extraerProductoDe: pozo en: (self diaDeHoy addDays: 6) ] 		raise: ExtraccionInvalida 		description: ('No se puede extraer producto de {1} porque al {2} no esta terminado aun' format: { pozo . self diaDeHoy })! !!TestsSistemaDeExtraccionDePozos methodsFor: 'private-accessing' stamp: 'JuanVanecek 5/7/2017 06:09'!defaultAlpha2	^ 0.01! !!TestsSistemaDeExtraccionDePozos methodsFor: 'private-accessing' stamp: 'JuanVanecek 5/19/2017 00:38'!unaPlantaProcesadora			^ plantaProcesadora ! !!TestsSistemaDeExtraccionDePozos methodsFor: 'private-accessing' stamp: 'JuanVanecek 5/7/2017 06:27'!diaDeHoy	^ Date today! !!TestsSistemaDeExtraccionDePozos methodsFor: 'private-accessing' stamp: 'JuanVanecek 5/7/2017 06:09'!defaultAlpha1	^ 0.5! !!TestsSistemaDeExtraccionDePozos methodsFor: 'private-accessing' stamp: 'JuanVanecek 5/20/2017 13:35'!diaDeHoyMas: unosDias			^ self diaDeHoy addDays: unosDias! !!TestsSistemaDeExtraccionDePozos methodsFor: 'private-accessing' stamp: 'JuanVanecek 5/19/2017 18:44'!parcelaLibreConUnaPresion: unaPresion 	resistenciaDe: unPorcentaje	yDistanciaAlReservorio: unaDistanciaEnMetros	^ yacimiento 		parcelaLibreDeTipo: (MantoGeologico conocidoComo: 'manto' ofreciendoUnaResistenciaDel: unPorcentaje)		presionInicial: unaPresion 		yDistanciaAlReservorio: unaDistanciaEnMetros! !!TestsSistemaDeExtraccionDePozos methodsFor: 'testing - reinyecciones' stamp: 'JuanVanecek 5/21/2017 21:37'!testNoSePuedeExtraerElMismoDiaQueHayReinyecciones	| pozo1 pozo2 | 	pozo1 := self pozoConUnaPresionInicial: 1000 construidoEnDias: 1 empezando: self diaDeHoy.	pozo2 := self pozoConUnaPresionInicial: 2000 construidoEnDias: 1 empezando: self diaDeHoy.		sistemaDeExtraccion reinyectar: 10 deAguaEn: pozo2 el: (self diaDeHoyMas: 2).	self 		should: [	 sistemaDeExtraccion extraerProductoDe: pozo1 en: (self diaDeHoyMas: 2) ] raise: ExtraccionInvalida;		should: [	 sistemaDeExtraccion extraerProductoDe: pozo2 en: (self diaDeHoyMas: 2) ] raise: ExtraccionInvalida! !!TestsSistemaDeExtraccionDePozos methodsFor: 'testing - reinyecciones' stamp: 'JuanVanecek 5/22/2017 02:27'!testReinyectarEnCualquierPozoCambiaLasPresionesDeTodosLosPozos	| pozo1 pozo2 productoExtraido presionPozo1LuegoDeReinyeccion presionPozo2LuegoDeReinyeccion volumenYacimientoLuegoDeReinyeccion | 	pozo1 := self pozoConUnaPresionInicial: 1000 construidoEnDias: 2 empezando: (self diaDeHoyMenos: 3).	pozo2 := self pozoConUnaPresionInicial: 2000 construidoEnDias: 2 empezando: (self diaDeHoyMenos: 3).		self 		assert: (sistemaDeExtraccion presionDe: pozo1 a: self diaDeHoy) equals: pozo1 presionInicial;		assert: (sistemaDeExtraccion presionDe: pozo2 a: self diaDeHoy) equals: pozo2 presionInicial;		assert: (sistemaDeExtraccion presionDe: pozo1 a: (self diaDeHoyMas: 1)) equals: pozo1 presionInicial;		assert: (sistemaDeExtraccion presionDe: pozo2 a: (self diaDeHoyMas: 1)) equals: pozo2 presionInicial.			sistemaDeExtraccion extraerProductoDe: pozo1 en: 	self diaDeHoy.			self 		assert: (sistemaDeExtraccion presionDe: pozo1 a: self diaDeHoy) equals: pozo1 presionInicial;		assert: (sistemaDeExtraccion presionDe: pozo2 a: self diaDeHoy) equals: pozo2 presionInicial;		assert: (sistemaDeExtraccion presionDe: pozo1 a: (self diaDeHoyMas: 1)) equals: (pozo1 presionInicial / (Float e ** 0.1));		assert: (sistemaDeExtraccion presionDe: pozo2 a: (self diaDeHoyMas: 1)) equals: (pozo2 presionInicial / (Float e ** 0.1));		assert: (sistemaDeExtraccion presionDe: pozo1 a: (self diaDeHoyMas: 2)) equals: (pozo1 presionInicial / (Float e ** 0.1));		assert: (sistemaDeExtraccion presionDe: pozo2 a: (self diaDeHoyMas: 2)) equals: (pozo2 presionInicial / (Float e ** 0.1)).		productoExtraido := sistemaDeExtraccion productoExtraidoDe: pozo1 a: self diaDeHoy.	sistemaDeExtraccion reinyectar: 20 deGasEn: pozo2 el: (self diaDeHoyMas: 1). 		volumenYacimientoLuegoDeReinyeccion := yacimiento volumenDeProductoInicial - productoExtraido cantidadProducto + 20. 	presionPozo1LuegoDeReinyeccion := pozo1 presionInicial * volumenYacimientoLuegoDeReinyeccion / yacimiento volumenDeProductoInicial.	presionPozo2LuegoDeReinyeccion := pozo2 presionInicial * volumenYacimientoLuegoDeReinyeccion / yacimiento volumenDeProductoInicial.			self 		assert: (sistemaDeExtraccion presionDe: pozo1 a: self diaDeHoy) equals: pozo1 presionInicial;		assert: (sistemaDeExtraccion presionDe: pozo2 a: self diaDeHoy) equals: pozo2 presionInicial;		assert: (sistemaDeExtraccion presionDe: pozo1 a: (self diaDeHoyMas: 1)) equals: (pozo1 presionInicial / (Float e ** 0.1));		assert: (sistemaDeExtraccion presionDe: pozo2 a: (self diaDeHoyMas: 1)) equals: (pozo2 presionInicial / (Float e ** 0.1));		assert: (sistemaDeExtraccion presionDe: pozo1 a: (self diaDeHoyMas: 2)) equals: presionPozo1LuegoDeReinyeccion;		assert: (sistemaDeExtraccion presionDe: pozo2 a: (self diaDeHoyMas: 2)) equals: presionPozo2LuegoDeReinyeccion;		assert: (sistemaDeExtraccion presionDe: pozo1 a: (self diaDeHoyMas: 3)) equals: presionPozo1LuegoDeReinyeccion;		assert: (sistemaDeExtraccion presionDe: pozo2 a: (self diaDeHoyMas: 3)) equals: presionPozo2LuegoDeReinyeccion.		sistemaDeExtraccion extraerProductoDe: pozo2 en: 	(self diaDeHoyMas: 2).			self 		assert: (sistemaDeExtraccion presionDe: pozo1 a: self diaDeHoy) equals: pozo1 presionInicial;		assert: (sistemaDeExtraccion presionDe: pozo2 a: self diaDeHoy) equals: pozo2 presionInicial;		assert: (sistemaDeExtraccion presionDe: pozo1 a: (self diaDeHoyMas: 1)) equals: (pozo1 presionInicial / (Float e ** 0.1));		assert: (sistemaDeExtraccion presionDe: pozo2 a: (self diaDeHoyMas: 1)) equals: (pozo2 presionInicial / (Float e ** 0.1));		assert: (sistemaDeExtraccion presionDe: pozo1 a: (self diaDeHoyMas: 2)) equals: presionPozo1LuegoDeReinyeccion;		assert: (sistemaDeExtraccion presionDe: pozo2 a: (self diaDeHoyMas: 2)) equals: presionPozo2LuegoDeReinyeccion;		assert: (sistemaDeExtraccion presionDe: pozo1 a: (self diaDeHoyMas: 3)) 			equals: (presionPozo1LuegoDeReinyeccion / (Float e ** (0.1 * volumenYacimientoLuegoDeReinyeccion / yacimiento volumenDeProductoInicial)));		assert: (sistemaDeExtraccion presionDe: pozo2 a: (self diaDeHoyMas: 3)) 			equals: (presionPozo2LuegoDeReinyeccion  / (Float e ** (0.1 * volumenYacimientoLuegoDeReinyeccion / yacimiento volumenDeProductoInicial)))! !!TestsSistemaDeExtraccionDePozos methodsFor: 'testing - reinyecciones' stamp: 'JuanVanecek 5/21/2017 21:11'!testNoSePuedeReinyectarElMismoDiaQueHayExtracciones	| pozo1 pozo2 | 	pozo1 := self pozoConUnaPresionInicial: 1000 construidoEnDias: 1 empezando: self diaDeHoy.	pozo2 := self pozoConUnaPresionInicial: 2000 construidoEnDias: 1 empezando: self diaDeHoy.		sistemaDeExtraccion extraerProductoDe: pozo1 en: 	(self diaDeHoyMas: 2).	self 		should: [ sistemaDeExtraccion reinyectar: 10 deAguaEn: pozo2 el: (self diaDeHoyMas: 2) ] raise: ReinyeccionInvalida;		should: [ sistemaDeExtraccion reinyectar: 20 deGasEn: pozo2 el: (self diaDeHoyMas: 2) ] raise: ReinyeccionInvalida! !!TestsSistemaDeExtraccionDePozos methodsFor: 'setup' stamp: 'JuanVanecek 5/19/2017 00:33'!setUpYacimiento		yacimiento := 		Yacimiento 			deTamanioEnHectareas: 5			volumenDeProducto: 10000000			compuestoPor: (				ComposicionPorcentualDeReservorio					gas: 20					agua: 10).		! !!TestsSistemaDeExtraccionDePozos methodsFor: 'setup' stamp: 'JuanVanecek 5/21/2017 23:29'!setUpPlantaProcesadora		plantaProcesadora := PlantaProcesadora 		construidaEnDias: 1 		conUnCostoTotalDe: 10000 		procesandoUnVolumenDiarioDe: 999999.			sistemaDeConstruccion construirUnaPlantaProcesadora: plantaProcesadora arrancandoEl: (self diaDeHoyMenos: 3).		self 		construirTanqueDeAguaDe: 99999 conectadoA: plantaProcesadora enDia: 1 arrancando: (self diaDeHoyMenos: 3);		construirTanqueDeGasDe: 99999 conectadoA: plantaProcesadora enDia: 1 arrancando: (self diaDeHoyMenos: 3)	! !!TestsSistemaDeExtraccionDePozos methodsFor: 'setup' stamp: 'JuanVanecek 5/7/2017 07:21'!setUpSistemaDeExtraccion		sistemaDeExtraccion := SistemaDeExtraccionDePozos		comoParteDe: simulador		calcuandoPresionCon:			(CalculadoraDefaultDePresiones				usandoComoAlpha1: self defaultAlpha1				comoAlpha2: self defaultAlpha2)! !!TestsSistemaDeExtraccionDePozos methodsFor: 'setup' stamp: 'JuanVanecek 5/19/2017 00:38'!setUp	super setUp.	simulador := SistemaDeSimulacion new.	self		setUpSistemaDeConstruccion;		setUpSistemaDeExtraccion;		setUpYacimiento; 		setUpPlantaProcesadora! !!TestsSistemaDeExtraccionDePozos methodsFor: 'setup' stamp: 'JuanVanecek 5/7/2017 06:46'!setUpSistemaDeConstruccion	sistemaDeConstruccion := SistemaDeConstruccionDePozos comoParteDe: simulador.! !!TestsSistemaDeExtraccionDePozos methodsFor: 'private-construcciones' stamp: 'JuanVanecek 5/19/2017 00:56'!plantaQueProcesaDiariamente: unVolumen construidaEnDias: dias arrancando: unaFecha 	^ sistemaDeConstruccion construirUnaPlantaProcesadora: (			PlantaProcesadora 			construidaEnDias: dias 			conUnCostoTotalDe: 10000 			procesandoUnVolumenDiarioDe: unVolumen) 		arrancandoEl: unaFecha! !!TestsSistemaDeExtraccionDePozos methodsFor: 'private-construcciones' stamp: 'JuanVanecek 5/19/2017 18:46'!pozoConstruidoEnDias: unaCantidadDeDias 	empezando: unaFecha	conectadaA: unaPlantaProcesadora		^ self 		pozoConUnaPresionInicial: 500		construidoEnDias: unaCantidadDeDias 		empezando: unaFecha		conectadaA: unaPlantaProcesadora! !!TestsSistemaDeExtraccionDePozos methodsFor: 'private-construcciones' stamp: 'JuanVanecek 5/21/2017 23:36'!pozoConUnaPresionInicial: unaPresion 	construidoEnDias: unaCantidadDeDias 	empezando: unaFecha	conectadaA: unaPlantaProcesadora		| parcela excavadora | 	parcela := self parcelaLibreConUnaPresion: unaPresion resistenciaDe: 0 yDistanciaAlReservorio: unaCantidadDeDias.	excavadora := ExcavadoraRig perforandoEnMetrosEnUnDia: 1 consumiendoEnLitros: 5.		^ sistemaDeConstruccion construirUnPozoEn: parcela conectadaA: unaPlantaProcesadora con: excavadora arrancandoEl: unaFecha! !!TestsSistemaDeExtraccionDePozos methodsFor: 'private-construcciones' stamp: 'JuanVanecek 5/19/2017 18:48'!pozoConUnaPresionInicial: unaPresion construidoEnDias: unaCantidadDeDias empezando: unaFecha		^ self 		pozoConUnaPresionInicial: unaPresion		construidoEnDias: unaCantidadDeDias 		empezando: unaFecha 		conectadaA: self unaPlantaProcesadora! !!TestsSistemaDeExtraccionDePozos methodsFor: 'private-construcciones' stamp: 'JuanVanecek 5/19/2017 01:00'!construirTanqueDeGasDe: unaCapacidad conectadoA: unaPlantaProcesadora enDia: dias arrancando: unaFecha 	sistemaDeConstruccion construirTanqueDeGas: (		TanqueDeGas 			construidaEnDias: dias			conUnCostoTotalDe: 10000			conectadoA: unaPlantaProcesadora 			conCapacidadDe: unaCapacidad) 		empezandoEl: unaFecha! !!TestsSistemaDeExtraccionDePozos methodsFor: 'private-construcciones' stamp: 'JuanVanecek 5/19/2017 18:48'!pozoConstruidoEnDias: unaCantidadDeDias empezando: unaFecha		^ self pozoConstruidoEnDias: unaCantidadDeDias empezando: unaFecha conectadaA: self unaPlantaProcesadora! !!TestsSistemaDeExtraccionDePozos methodsFor: 'private-construcciones' stamp: 'JuanVanecek 5/19/2017 00:45'!construirTanqueDeAguaDe: unaCapacidad conectadoA: unaPlantaProcesadora enDia: dias arrancando: unaFecha	sistemaDeConstruccion construirTanqueDeAgua: (		TanqueDeAgua 			construidaEnDias: dias			conUnCostoTotalDe: 10000			conectadoA: unaPlantaProcesadora 			conCapacidadDe: unaCapacidad) 		empezandoEl: unaFecha! !!TestsSistemaDeExtraccionDePozos methodsFor: 'private-asserting' stamp: 'JuanVanecek 5/12/2017 22:56'!assert: aNumber isNear: anotherNumber withTolerance: anError	self assert: (aNumber - anotherNumber) abs <= anError! !!TestsSistemaDeExtraccionDePozos methodsFor: 'accessing' stamp: 'JuanVanecek 5/21/2017 23:29'!diaDeHoyMenos: unosDias 	^ self diaDeHoy subtractDays: unosDias! !TestCase subclass: #TestsUnitarios	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Tp1-Ing1-Tests'!!TestsUnitarios methodsFor: 'private-accessing' stamp: 'JuanVanecek 4/9/2017 22:05'!terrenoRocoso		^MantoGeologico conocidoComo: 'Terreno Rocoso' ofreciendoUnaResistenciaDel: 0! !!TestsUnitarios methodsFor: 'Testing' stamp: 'JuanVanecek 5/19/2017 01:19'!testUnProductoAcotadoPorUnLimiteDeAguaYGas	| producto productoAcotado | 		" 25000 TOTAL 		-> 12% agua -> 3000 agua 		-> 18% gas -> 4500 gas "	producto := 		ProductoDeReservorio 			cantidad: 25000 			compuestoDe: (ComposicionPorcentualDeReservorio gas: 18 agua: 12).		self 		assert: producto cantidadProducto equals: 25000;		assert: producto porcentajeDeAgua equals: 12;		assert: producto porcentajeDeGas equals: 18.					" X TOTAL -> 12% agua -> 600 agua => X = 600 * 25000 / 3000 = 5000 "	productoAcotado := producto acotadoPorElAguaAUnTotalDe: 600 yPorElGasA: 999.	self		assert: productoAcotado cantidadProducto equals: 5000;		assert: productoAcotado porcentajeDeAgua equals: 12; 		assert: productoAcotado porcentajeDeGas equals: 18.			" X TOTAL -> 18% gas -> 200 gas => X = 1800 * 25000 / 4500 = 10000 "	productoAcotado := producto acotadoPorElAguaAUnTotalDe: 4000 yPorElGasA: 1800.	self 		assert: productoAcotado cantidadProducto equals: 10000;		assert: productoAcotado porcentajeDeAgua equals: 12; 		assert: productoAcotado porcentajeDeGas equals: 18.		productoAcotado := producto acotadoPorElAguaAUnTotalDe: 600 yPorElGasA: 1800.	self 		assert: productoAcotado cantidadProducto equals: 5000;		assert: productoAcotado porcentajeDeAgua equals: 12; 		assert: productoAcotado porcentajeDeGas equals: 18.! !!TestsUnitarios methodsFor: 'Testing' stamp: 'JuanVanecek 5/1/2017 11:13'!testConectarTanquesDeAlmacenamientoAUnaPlantaProcesadora 	| planta tanqueDeGas tanqueDeAgua | 		planta := PlantaProcesadora		construidaEnDias: 10		conUnCostoTotalDe: 4000		procesandoUnVolumenDiarioDe: 40.			tanqueDeGas := TanqueDeGas 		construidaEnDias: 1		conUnCostoTotalDe: 4		conectadoA: planta		conCapacidadDe: 400.	tanqueDeAgua := TanqueDeAgua 		construidaEnDias: 1		conUnCostoTotalDe: 4		conectadoA: planta		conCapacidadDe: 500.		self 		assert: planta tanquesDeAlmacenamiento 		hasTheSameElementsThat: (Array with: tanqueDeGas with: tanqueDeAgua)! !!TestsUnitarios methodsFor: 'Testing' stamp: 'JuanVanecek 4/8/2017 13:19'!testRegistrarUnaExcavadoraEnElCatalogo	| excavadora catalogo | 		excavadora := ExcavadoraRig 		perforandoEnMetrosEnUnDia: 1		consumiendoEnLitros: 3. 			catalogo := (CatalogoDeExcavadorasRig new)		registrar: excavadora 			aUnCostoPorDia: 500 			porUnMinimoDeDias: 4;		yourself.			self assertTheOnlyOneIn: catalogo excavadorasDisponibles is: excavadora.		catalogo conLosRegistrosHacer: [:excavadoraDisponible :costoPorDia :alquilerMinimo | 		self 			assert: excavadoraDisponible equals: excavadora;			assert: costoPorDia equals: 500; 			assert: alquilerMinimo equals: 4		 ]! !!TestsUnitarios methodsFor: 'Testing' stamp: 'JuanVanecek 5/19/2017 00:34'!testLosCompuestosDeUnYacimientoTieneQueSerSu100porCiento	self		should: [ 				Yacimiento 					deTamanioEnHectareas: 1					volumenDeProducto: 10000000					compuestoPor: (						ComposicionPorcentualDeReservorio							petroleo: 70							gas: 30							agua: 10)] 			raise: AssertionFailure			description: 'Los compuestos tienen que representar el 100% del reservorio';		should: [ 				Yacimiento 					deTamanioEnHectareas: 1					volumenDeProducto: 10000000					compuestoPor: (						ComposicionPorcentualDeReservorio							petroleo: 60							gas: 20							agua: 10)] 			raise: AssertionFailure			description: 'Los compuestos tienen que representar el 100% del reservorio';		should: [ 				Yacimiento 					deTamanioEnHectareas: 1					volumenDeProducto: 10000000					compuestoPor: (						ComposicionPorcentualDeReservorio							petroleo: 60							gas: 10							agua: 100)] 			raise: AssertionFailure			description: 'Los compuestos tienen que representar el 100% del reservorio'.		self 		shouldnt: [ 				Yacimiento 					deTamanioEnHectareas: 1					volumenDeProducto: 10000000					compuestoPor: (						ComposicionPorcentualDeReservorio							petroleo: 60							gas: 30							agua: 10)] 			raise: AssertionFailure;		shouldnt: [ 				Yacimiento 					deTamanioEnHectareas: 1					volumenDeProducto: 10000000					compuestoPor: (						ComposicionPorcentualDeReservorio							petroleo: 100							gas: 0							agua: 0)] 			raise: AssertionFailure! !!TestsUnitarios methodsFor: 'Testing' stamp: 'JuanVanecek 5/19/2017 00:34'!testNoPuedoTenerMasParcelasEnUnYacimientoQueSuTamanio	| tmp1 |	tmp1 := Yacimiento		deTamanioEnHectareas: 3		volumenDeProducto: 10000000		compuestoPor: (ComposicionPorcentualDeReservorio gas: 30 agua: 10).	(1 to: 4)		do: [ :arg1 | 			| tmp2 |			tmp2 := [ tmp1				parcelaLibreDeTipo: self terrenoRocoso				presionInicial: 100				yDistanciaAlReservorio: 5 ].			arg1 < 4				ifTrue: tmp2				ifFalse: [ self						should: tmp2						raise: AssertionFailure						description: 'No hay más parcelas disponibles para este yacimiento' ] ]! !!TestsUnitarios methodsFor: 'Testing' stamp: 'JuanVanecek 5/19/2017 00:34'!testUnYacimientoTieneUnaCapacididadLimitadaDeProducto	self		should: [ 				Yacimiento 					deTamanioEnHectareas: 1					volumenDeProducto: 9999999					compuestoPor: (						ComposicionPorcentualDeReservorio							gas: 20							agua: 10)] 			raise: AssertionFailure			description: 'La cantidad de producto tiene que estar entre 10000000 y 1000000000 m3';		should: [ 				Yacimiento 					deTamanioEnHectareas: 1					volumenDeProducto: 1000000001					compuestoPor: (						ComposicionPorcentualDeReservorio							gas: 30							agua: 0)] 			raise: AssertionFailure			description: 'La cantidad de producto tiene que estar entre 10000000 y 1000000000 m3'! !!TestsUnitarios methodsFor: 'private-asserting' stamp: 'JuanVanecek 4/9/2017 11:13'!assert: aCollection hasTheSameElementsThat: anotherCollection 	self assert: aCollection size equals: anotherCollection size.		anotherCollection do: [:element | 		self assert: (aCollection includes: element)		 ]! !!TestsUnitarios methodsFor: 'private-asserting' stamp: 'JuanVanecek 4/8/2017 13:25'!assertTheOnlyOneIn: aCollection is: anElement 	self 		assert: aCollection size equals: 1;		assert: aCollection first equals: anElement! !